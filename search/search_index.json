{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PromptSite","text":"<p>PromptSite is a lightweight prompt management package that helps you version control, develop, and experiment with your LLM prompts with ease. </p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Version Control: Track and manage different versions of your prompts during the engineering process</li> <li>Flexible Storage: Choose between local file storage or Git-based storage backends</li> <li>Run Tracking: Automatically track and analyze prompt executions and LLM responses  </li> <li>Synthetic Data Generation: Generate synthetic relational data to quickly test prompts</li> <li>CLI Interface: Comprehensive command-line tools for prompt management</li> <li>Python Decorator: Simple integration with existing LLM code through decorators</li> <li>Variable Management: Define, validate and manage variables used in prompts</li> </ul>"},{"location":"#key-differentiators","title":"Key Differentiators","text":"<ul> <li>No Heavy Lifting: Minimal setup, no servers, databases, or API keys required - works directly with your local filesystem or Git</li> <li>Seamless Integration: Automatically tracks prompt versions and runs through simple Python decorators</li> <li>Developer-Centric: Designed for data scientists and engineers to easily integrate into existing ML/LLM workflows</li> <li>Designed for Experimentation: Optimized for rapid prompt iteration, debugging, and experimentation for LLM development</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install promptsite\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from promptsite import PromptSite\n\n# Initialize PromptSite\nps = PromptSite()\n\n# Register a new prompt\nprompt = ps.register_prompt(\n    prompt_id=\"translation-prompt\",\n    initial_content=\"Translate this text: {{ text }}\",\n    description=\"Basic translation prompt\",\n    tags=[\"translation\", \"basic\"]\n)\n\n# Add a new version\nnew_version = ps.add_prompt_version(\n    prompt_id=\"translation-prompt\", \n    new_content=\"Please translate the following text to {{ language }}: {{ text }}\"\n)\n\n# Track an LLM run\nrun = ps.add_run(\n    prompt_id=\"translation-prompt\",\n    version_id=new_version.version_id,\n    llm_output=\"Hola mundo\",\n    execution_time=0.5,\n    llm_config={\n        \"model\": \"gpt-4\",\n        \"temperature\": 0.7\n    },\n    variables={\n        \"language\": \"Spanish\",\n        \"text\": \"Hello world\"\n    },\n    final_prompt=\"Please translate the following text to Spanish: {{ text }}\"\n)\n</code></pre>"},{"location":"#using-the-decorator-to-automatically-track-prompt-versions-and-runs","title":"Using the Decorator to automatically track prompt versions and runs","text":"<pre><code>from promptsite.decorator import tracker\nfrom pydantic import BaseModel, Field\nfrom promptsite.model.variable import ArrayVariable\nfrom promptsite.model.dataset import Dataset\nclass Weather(BaseModel):\n    date: str = Field(description=\"The date of the weather data.\")\n    temperature: float = Field(description=\"The temperature in Celsius.\")\n    condition: str = Field(description=\"The weather condition (sunny, rainy, etc).\")\n\n@tracker(\n    prompt_id=\"analyze-weather-prompt\",\n    description=\"Analyze weather data and predict which day is best for a picnic\",\n    tags=[\"weather\", \"analysis\"],\n    variables={\n        \"weather\": ArrayVariable(model=Weather)\n    }\n)\ndef analyze_weather(content=None, llm_config=None, variables=None):\n    response = openai.ChatCompletion.create(\n        model=\"gpt-4\",\n        messages=[{\"role\": \"user\", \"content\": content}]\n    )\n    return response.choices[0].message.content\n\n# Run the function\ncontent = \"\"\"The following dataset describes the weather for each day:\n{{ weather }}\n\nBased on the weather data, predict which day is best for a picnic.\n\"\"\"\n\n# pass in existing data\ndata = [\n    {\"date\": \"2024-01-01\", \"temperature\": 20, \"condition\": \"sunny\"},\n    {\"date\": \"2024-01-02\", \"temperature\": 15, \"condition\": \"rainy\"},\n    {\"date\": \"2024-01-03\", \"temperature\": 25, \"condition\": \"sunny\"}\n]\n\n# Or generate weather data using your own LLM backend\nweather_data = Dataset.generate(\n    id=\"weather_data\",\n    variable=ArrayVariable(model=Weather),\n    description=\"Weather with some variety\",\n    num_rows=7\n)\ndata = weather_data.data\n\nanalyze_weather(content=content, variables={\"weather\": data})\n</code></pre>"},{"location":"#cli-usage","title":"CLI Usage","text":"<p>Initialize storage:</p> <pre><code>promptsite init\n</code></pre> <p>Register a new prompt:</p> <pre><code>promptsite prompt register my-prompt --content \"Translate this text: {{ text }}\" --description \"Translation prompt\" --tags translation gpt\n</code></pre> <p>List all prompts:</p> <pre><code>promptsite prompt list\n</code></pre> <p>Add a new version:</p> <pre><code>promptsite version add my-prompt --content \"Please translate the following text: {{ text }}\"\n</code></pre> <p>View version history:</p> <pre><code>promptsite version list my-prompt\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please check out our contribution guidelines for details on how to get started.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details. ```</p>"},{"location":"api/core/","title":"Core API Reference","text":"<p>This page documents the core API functionality of PromptSite.</p>"},{"location":"api/core/#promptsite.core.PromptSite","title":"<code>promptsite.core.PromptSite</code>","text":"<p>Main class for managing prompts and their versions.</p> <p>The PromptSite class provides a high-level interface for managing prompts, versions, and execution runs. It handles all operations through a configured storage backend and provides methods for prompt registration, version control, and run tracking.</p> <p>Attributes:</p> Name Type Description <code>storage</code> <code>StorageBackend</code> <p>Backend storage implementation for persisting data</p> Example <p>ps = PromptSite(storage_backend) prompt = ps.register_prompt(\"my-prompt\", \"Initial content\") version = ps.add_prompt_version(\"my-prompt\", \"Updated content\")</p>"},{"location":"api/core/#promptsite.core.PromptSite.prompts","title":"<code>prompts</code>  <code>property</code>","text":"<p>Get all prompts as a pandas DataFrame.</p>"},{"location":"api/core/#promptsite.core.PromptSite.runs","title":"<code>runs</code>  <code>property</code>","text":"<p>Get all runs as a pandas DataFrame.</p>"},{"location":"api/core/#promptsite.core.PromptSite.versions","title":"<code>versions</code>  <code>property</code>","text":"<p>Get all versions as a pandas DataFrame.</p>"},{"location":"api/core/#promptsite.core.PromptSite.__init__","title":"<code>__init__(storage=None)</code>","text":"<p>Initialize promptsite.</p> <p>Parameters:</p> Name Type Description Default <code>storage</code> <code>Storage</code> <p>Storage backend instance.</p> <code>None</code>"},{"location":"api/core/#promptsite.core.PromptSite.add_prompt_version","title":"<code>add_prompt_version(prompt_id, new_content=None, variables=None)</code>","text":"<p>Add a new version to an existing prompt.</p> <p>Creates a new version of the prompt with updated content. If the prompt has an associated file, the content can be read from the file instead of being provided directly.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt to version</p> required <code>new_content</code> <code>Optional[str]</code> <p>Optional new content for the version</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Version</code> <code>Version</code> <p>The newly created version object</p> <p>Raises:</p> Type Description <code>PromptNotFoundError</code> <p>If prompt_id doesn't exist</p> <code>InvalidPromptContentError</code> <p>If no content is provided</p>"},{"location":"api/core/#promptsite.core.PromptSite.add_run","title":"<code>add_run(prompt_id, version_id, final_prompt, variables=None, llm_output=None, execution_time=None, llm_config=None)</code>","text":"<p>Record a new execution run for a specific prompt version.</p> <p>Tracks the execution of a prompt version including the LLM's response, execution metrics, and configuration used.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt</p> required <code>version_id</code> <code>str</code> <p>ID of the version executed</p> required <code>llm_output</code> <code>Optional[str]</code> <p>Output received from the LLM</p> <code>None</code> <code>execution_time</code> <code>Optional[float]</code> <p>Time taken for execution in seconds</p> <code>None</code> <code>llm_config</code> <code>Optional[Dict[str, Any]]</code> <p>Configuration used for the LLM call</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Run</code> <code>Run</code> <p>The created run object</p> <p>Raises:</p> Type Description <code>PromptNotFoundError</code> <p>If prompt doesn't exist</p> <code>VersionNotFoundError</code> <p>If version doesn't exist</p>"},{"location":"api/core/#promptsite.core.PromptSite.delete_prompt","title":"<code>delete_prompt(prompt_id)</code>","text":"<p>Delete a prompt and its associated file data.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt to delete</p> required <p>Raises:</p> Type Description <code>PromptNotFoundError</code> <p>If prompt with given ID doesn't exist</p>"},{"location":"api/core/#promptsite.core.PromptSite.get_last_run","title":"<code>get_last_run(prompt_id)</code>","text":"<p>Get the last run of a specific prompt.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt</p> required <p>Returns:</p> Name Type Description <code>Run</code> <code>Run</code> <p>The last run of the prompt</p>"},{"location":"api/core/#promptsite.core.PromptSite.get_prompt","title":"<code>get_prompt(prompt_id, exclude_versions=False)</code>","text":"<p>Get a prompt by its id.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt to retrieve</p> required <code>exclude_versions</code> <code>bool</code> <p>Whether to exclude versions from the prompt</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Prompt</code> <code>Prompt</code> <p>The requested prompt</p> <p>Raises:</p> Type Description <code>PromptNotFoundError</code> <p>If prompt with given ID doesn't exist</p>"},{"location":"api/core/#promptsite.core.PromptSite.get_run","title":"<code>get_run(prompt_id, version_id, run_id)</code>","text":"<p>Get a specific run of a prompt version.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt</p> required <code>version_id</code> <code>str</code> <p>ID of the version</p> required <code>run_id</code> <code>str</code> <p>ID of the run</p> required <p>Returns:</p> Name Type Description <code>Run</code> <code>Run</code> <p>The requested run</p> <p>Raises:</p> Type Description <code>PromptNotFoundError</code> <p>If prompt doesn't exist</p> <code>RunNotFoundError</code> <p>If run doesn't exist</p>"},{"location":"api/core/#promptsite.core.PromptSite.get_version","title":"<code>get_version(prompt_id, version_id)</code>","text":"<p>Get a specific version of a prompt.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt</p> required <code>version_id</code> <code>str</code> <p>ID of the version to retrieve</p> required <p>Returns:</p> Name Type Description <code>Version</code> <code>Version</code> <p>The requested version</p> <p>Raises:</p> Type Description <code>PromptNotFoundError</code> <p>If prompt doesn't exist</p> <code>VersionNotFoundError</code> <p>If version doesn't exist</p>"},{"location":"api/core/#promptsite.core.PromptSite.get_version_by_content","title":"<code>get_version_by_content(prompt_id, content)</code>","text":"<p>Get a version by its content.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt</p> required <code>content</code> <code>str</code> <p>Content to search for</p> required <p>Returns:</p> Name Type Description <code>Version</code> <code>Optional[Version]</code> <p>The version with matching content</p> <code>None</code> <code>Optional[Version]</code> <p>If no version matches the content</p>"},{"location":"api/core/#promptsite.core.PromptSite.list_prompts","title":"<code>list_prompts(exclude_versions=False)</code>","text":"<p>Get all registered prompts.</p> <p>Returns:</p> Type Description <code>List[Prompt]</code> <p>List[Prompt]: List of all prompts</p>"},{"location":"api/core/#promptsite.core.PromptSite.list_runs","title":"<code>list_runs(prompt_id, version_id)</code>","text":"<p>Get all runs for a specific prompt version.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt</p> required <code>version_id</code> <code>str</code> <p>ID of the version</p> required <p>Returns:</p> Type Description <code>List[Run]</code> <p>List[Run]: List of all runs for the version</p>"},{"location":"api/core/#promptsite.core.PromptSite.list_versions","title":"<code>list_versions(prompt_id, exclude_runs=False)</code>","text":"<p>Get all versions of a prompt.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt</p> required <p>Returns:</p> Type Description <code>List[Version]</code> <p>List[Version]: List of all versions</p> <p>Raises:</p> Type Description <code>PromptNotFoundError</code> <p>If prompt with given ID doesn't exist</p>"},{"location":"api/core/#promptsite.core.PromptSite.register_prompt","title":"<code>register_prompt(prompt_id, description='', tags=None, initial_content=None, variables=None)</code>","text":"<p>Register a new prompt with the system.</p> <p>Creates a new prompt entry with optional file association and initial content. The prompt can be created either from direct content or from a file.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>Unique identifier for the prompt</p> required <code>description</code> <code>str</code> <p>Optional description of the prompt's purpose</p> <code>''</code> <code>tags</code> <code>Optional[List[str]]</code> <p>Optional list of tags for categorization</p> <code>None</code> <code>initial_content</code> <code>Optional[str]</code> <p>Optional initial content</p> <code>None</code> <code>variables</code> <code>Optional[Dict[str, Variable]]</code> <p>Optional variables for the prompt</p> <code>None</code> <p>Returns:     Prompt: The newly created prompt object</p> <p>Raises:</p> Type Description <code>PromptAlreadyExistsError</code> <p>If prompt_id already exists</p>"},{"location":"api/core/#promptsite.core.PromptSite.sync_git","title":"<code>sync_git()</code>","text":"<p>Synchronize changes with git remote if storage backend supports it.</p> <p>Raises:</p> Type Description <code>StorageError</code> <p>If storage backend doesn't support git operations</p> <code>StorageError</code> <p>If sync operation fails</p>"},{"location":"api/core/#promptsite.core.PromptSite.update_prompt","title":"<code>update_prompt(prompt_id, **kwargs)</code>","text":"<p>Update the variables of a prompt.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt to update</p> required <code>kwargs</code> <p>Optional fields to update</p> <code>{}</code>"},{"location":"api/exceptions/","title":"Exceptions API Reference","text":"<p>This page documents the exceptions API functionality of PromptSite.</p>"},{"location":"api/exceptions/#promptsite.exceptions","title":"<code>promptsite.exceptions</code>","text":""},{"location":"api/exceptions/#promptsite.exceptions.ConfigError","title":"<code>ConfigError</code>","text":"<p>               Bases: <code>PromptSiteError</code></p> <p>Base exception for config-related errors.</p>"},{"location":"api/exceptions/#promptsite.exceptions.ConfigFileNotFoundError","title":"<code>ConfigFileNotFoundError</code>","text":"<p>               Bases: <code>PromptSiteError</code></p> <p>Raised when config file is not found.</p>"},{"location":"api/exceptions/#promptsite.exceptions.ContentRequiredError","title":"<code>ContentRequiredError</code>","text":"<p>               Bases: <code>PromptSiteError</code></p> <p>Raised when content is required but not provided.</p>"},{"location":"api/exceptions/#promptsite.exceptions.DatasetFieldNotFoundError","title":"<code>DatasetFieldNotFoundError</code>","text":"<p>               Bases: <code>PromptSiteError</code></p> <p>Raised when a field is not found in the dataset.</p>"},{"location":"api/exceptions/#promptsite.exceptions.InvalidPromptContentError","title":"<code>InvalidPromptContentError</code>","text":"<p>               Bases: <code>PromptSiteError</code></p> <p>Raised when prompt content is invalid or empty.</p>"},{"location":"api/exceptions/#promptsite.exceptions.LLMBackendNotImplementedError","title":"<code>LLMBackendNotImplementedError</code>","text":"<p>               Bases: <code>PromptSiteError</code></p> <p>Raised when an LLM backend is not implemented.</p>"},{"location":"api/exceptions/#promptsite.exceptions.PromptAlreadyExistsError","title":"<code>PromptAlreadyExistsError</code>","text":"<p>               Bases: <code>PromptSiteError</code></p> <p>Raised when attempting to register a prompt that already exists.</p>"},{"location":"api/exceptions/#promptsite.exceptions.PromptNotFoundError","title":"<code>PromptNotFoundError</code>","text":"<p>               Bases: <code>PromptSiteError</code></p> <p>Raised when attempting to access a prompt that doesn't exist.</p>"},{"location":"api/exceptions/#promptsite.exceptions.PromptSiteError","title":"<code>PromptSiteError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception class for PromptSite errors.</p>"},{"location":"api/exceptions/#promptsite.exceptions.RunNotFoundError","title":"<code>RunNotFoundError</code>","text":"<p>               Bases: <code>PromptSiteError</code></p> <p>Raised when a run is not found.</p>"},{"location":"api/exceptions/#promptsite.exceptions.StorageBackendNotFoundError","title":"<code>StorageBackendNotFoundError</code>","text":"<p>               Bases: <code>PromptSiteError</code></p> <p>Raised when specified storage backend is not found.</p>"},{"location":"api/exceptions/#promptsite.exceptions.StorageError","title":"<code>StorageError</code>","text":"<p>               Bases: <code>PromptSiteError</code></p> <p>Base exception for storage-related errors.</p>"},{"location":"api/exceptions/#promptsite.exceptions.StorageFileNotFoundError","title":"<code>StorageFileNotFoundError</code>","text":"<p>               Bases: <code>PromptSiteError</code></p> <p>Raised when the storage file is not found.</p>"},{"location":"api/exceptions/#promptsite.exceptions.VariableUnmatchError","title":"<code>VariableUnmatchError</code>","text":"<p>               Bases: <code>PromptSiteError</code></p> <p>Raised when the variables and the values do not match.</p>"},{"location":"api/exceptions/#promptsite.exceptions.VariableValidationError","title":"<code>VariableValidationError</code>","text":"<p>               Bases: <code>PromptSiteError</code></p> <p>Raised when the variable is not valid.</p>"},{"location":"api/exceptions/#promptsite.exceptions.VersionNotFoundError","title":"<code>VersionNotFoundError</code>","text":"<p>               Bases: <code>PromptSiteError</code></p> <p>Raised when a prompt version is not found.</p>"},{"location":"api/llm/","title":"LLM API Reference","text":"<p>This page documents the LLM API for PromptSite.</p>"},{"location":"api/llm/#promptsite.llm.LLM","title":"<code>promptsite.llm.LLM</code>","text":"<p>Base class for LLM backends. To add a new LLM backend, you need to implement the <code>run</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Dict[str, Any]</code> <p>A dictionary of configuration for the LLM backend.</p> required"},{"location":"api/llm/#promptsite.llm.LLM.run","title":"<code>run(prompt, **kwargs)</code>","text":"<p>Run the LLM with the given prompt.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>The prompt to run the LLM with.</p> required"},{"location":"api/llm/#promptsite.llm.OpenAiLLM","title":"<code>promptsite.llm.OpenAiLLM</code>","text":"<p>               Bases: <code>LLM</code></p> <p>LLM backend for OpenAI.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Dict[str, Any]</code> <p>A dictionary of configuration for the OpenAI backend.</p> required"},{"location":"api/llm/#promptsite.llm.OpenAiLLM.run","title":"<code>run(user_prompt, system_prompt=None, **kwargs)</code>","text":"<p>Run the LLM with the given prompt.</p> <p>Parameters:</p> Name Type Description Default <code>user_prompt</code> <code>str</code> <p>The prompt to run the LLM with.</p> required <code>system_prompt</code> <code>Optional[str]</code> <p>The system prompt to run the LLM with.</p> <code>None</code>"},{"location":"api/llm/#promptsite.llm.AnthropicLLM","title":"<code>promptsite.llm.AnthropicLLM</code>","text":"<p>               Bases: <code>LLM</code></p> <p>LLM backend for Anthropic.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Dict[str, Any]</code> <p>A dictionary of configuration for the Anthropic backend.</p> required"},{"location":"api/llm/#promptsite.llm.AnthropicLLM.run","title":"<code>run(user_prompt, system_prompt=None, **kwargs)</code>","text":"<p>Run the LLM with the given prompt.</p> <p>Parameters:</p> Name Type Description Default <code>user_prompt</code> <code>str</code> <p>The prompt to run the LLM with.</p> required <code>system_prompt</code> <code>Optional[str]</code> <p>The system prompt to run the LLM with.</p> <code>None</code>"},{"location":"api/llm/#promptsite.llm.OllamaLLM","title":"<code>promptsite.llm.OllamaLLM</code>","text":"<p>               Bases: <code>LLM</code></p> <p>LLM backend for Ollama.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Dict[str, Any]</code> <p>A dictionary of configuration for the Ollama backend.</p> required"},{"location":"api/llm/#promptsite.llm.OllamaLLM.run","title":"<code>run(user_prompt, system_prompt=None, **kwargs)</code>","text":"<p>Run the LLM with the given prompt.</p> <p>Parameters:</p> Name Type Description Default <code>user_prompt</code> <code>str</code> <p>The prompt to run the LLM with.</p> required <code>system_prompt</code> <code>Optional[str]</code> <p>The system prompt to run the LLM with.</p> <code>None</code>"},{"location":"api/models/","title":"Models API Reference","text":"<p>This page documents the data models used in PromptSite.</p>"},{"location":"api/models/#promptsite.model.prompt.Prompt","title":"<code>promptsite.model.prompt.Prompt</code>  <code>dataclass</code>","text":"<p>A class representing a prompt with version control capabilities.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique identifier for the prompt</p> <code>description</code> <code>str</code> <p>Description of the prompt</p> <code>tags</code> <code>List[str]</code> <p>List of tags associated with the prompt</p> <code>versions</code> <code>Optional[Dict[str, Version]]</code> <p>Dictionary of versions for the prompt</p> <code>variables</code> <code>Optional[Dict[str, Variable]]</code> <p>Dictionary of variables for the prompt</p>"},{"location":"api/models/#promptsite.model.prompt.Prompt.add_version","title":"<code>add_version(content, variables=None)</code>","text":"<p>Add a new version of the prompt.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content of the new version</p> required <code>variables</code> <code>Optional[Dict[str, Variable]]</code> <p>Dictionary of variables for the new version</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Version</code> <code>Version</code> <p>The newly created version object</p>"},{"location":"api/models/#promptsite.model.prompt.Prompt.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a Prompt instance from a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Dictionary containing the prompt's data.</p> required <p>Returns:</p> Name Type Description <code>Prompt</code> <code>Prompt</code> <p>A new Prompt instance.</p>"},{"location":"api/models/#promptsite.model.prompt.Prompt.get_latest_version","title":"<code>get_latest_version()</code>","text":"<p>Get the latest version of the prompt.</p> <p>Returns:</p> Type Description <code>Optional[Version]</code> <p>Optional[Version]: The latest version, or None if no versions exist</p>"},{"location":"api/models/#promptsite.model.prompt.Prompt.to_dict","title":"<code>to_dict(columns=None)</code>","text":"<p>Convert the prompt to a dictionary representation.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Dictionary containing the prompt's data</p>"},{"location":"api/models/#promptsite.model.version.Version","title":"<code>promptsite.model.version.Version</code>  <code>dataclass</code>","text":"<p>A class representing a version of a prompt with its associated runs.</p> <p>Attributes:</p> Name Type Description <code>content</code> <code>str</code> <p>The content of the version</p> <code>created_at</code> <code>datetime</code> <p>The date and time when the version was created</p> <code>version_id</code> <code>str</code> <p>The unique identifier for the version</p> <code>variables</code> <code>Optional[Dict[str, Variable]]</code> <p>The variables of the version, if any, it overrides the prompt variables</p>"},{"location":"api/models/#promptsite.model.version.Version.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Initialize the version_id if not provided.</p>"},{"location":"api/models/#promptsite.model.version.Version._generate_version_id","title":"<code>_generate_version_id(content)</code>","text":"<p>Generate a version ID based on the hash of the content.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content of the version</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The generated version ID</p>"},{"location":"api/models/#promptsite.model.version.Version.add_run","title":"<code>add_run(final_prompt, variables, llm_output=None, execution_time=None, llm_config=None)</code>","text":"<p>Create and add a new run to this version.</p> <p>Parameters:</p> Name Type Description Default <code>llm_output</code> <code>Optional[str]</code> <p>The output text from the LLM</p> <code>None</code> <code>execution_time</code> <code>Optional[float]</code> <p>Time taken to execute in seconds</p> <code>None</code> <code>llm_config</code> <code>Optional[Dict[str, Any]]</code> <p>Configuration used for the LLM</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Run</code> <code>Run</code> <p>The newly created run</p>"},{"location":"api/models/#promptsite.model.version.Version.build_final_prompt","title":"<code>build_final_prompt(values, no_instructions=False, custom_instructions='')</code>","text":"<p>Build the final prompt with the variables of the version.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>Dict[str, Any]</code> <p>The values of the variables</p> required <code>no_instructions</code> <code>Optional[bool]</code> <p>Whether to use the custom instructions</p> <code>False</code> <code>custom_instructions</code> <code>Optional[str]</code> <p>The custom instructions</p> <code>''</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The final prompt</p>"},{"location":"api/models/#promptsite.model.version.Version.compare_variables","title":"<code>compare_variables(variables)</code>","text":"<p>Compare the variables of the version with the variables of the new version.</p> <p>Parameters:</p> Name Type Description Default <code>variables</code> <code>Dict[str, Variable]</code> <p>The variables of the new version</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the variables are the same, False otherwise</p>"},{"location":"api/models/#promptsite.model.version.Version.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create Version from dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict</code> <p>Dictionary containing the version's data</p> required <p>Returns:</p> Name Type Description <code>Version</code> <code>Version</code> <p>The newly created Version</p>"},{"location":"api/models/#promptsite.model.version.Version.to_dict","title":"<code>to_dict(columns=None)</code>","text":"<p>Convert Version to a dictionary with serializable values.</p> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>Dictionary containing the version's data</p>"},{"location":"api/models/#promptsite.model.run.Run","title":"<code>promptsite.model.run.Run</code>  <code>dataclass</code>","text":"<p>A Run represents a single execution of a prompt version, storing the output, execution time, and configuration used.</p> <p>Attributes:</p> Name Type Description <code>run_id</code> <code>str</code> <p>Unique identifier for this run</p> <code>created_at</code> <code>str</code> <p>ISO format timestamp when run was created</p> <code>run_at</code> <code>str</code> <p>ISO format timestamp when run was executed</p> <code>final_prompt</code> <code>str</code> <p>The final prompt that was executed</p> <code>variables</code> <code>Dict[str, Any]</code> <p>The variables that were used in the run</p> <code>llm_output</code> <code>Optional[str]</code> <p>The output text from the LLM</p> <code>execution_time</code> <code>Optional[float]</code> <p>Time taken to execute in seconds</p> <code>llm_config</code> <code>Optional[Dict[str, Any]]</code> <p>Configuration used for the LLM</p>"},{"location":"api/models/#promptsite.model.run.Run.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Initialize the run_id if not provided.</p>"},{"location":"api/models/#promptsite.model.run.Run._generate_run_id","title":"<code>_generate_run_id()</code>","text":"<p>Generate a run ID based on the hash of the run_at timestamp.</p>"},{"location":"api/models/#promptsite.model.run.Run.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a Run instance from a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Dictionary containing the run's data.</p> required <p>Returns:</p> Name Type Description <code>Run</code> <code>Run</code> <p>A new Run instance.</p>"},{"location":"api/models/#promptsite.model.run.Run.to_dict","title":"<code>to_dict(columns=None)</code>","text":"<p>Convert the run to a dictionary representation.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Dictionary containing the run's data.</p>"},{"location":"api/models/#promptsite.model.variable.Variable","title":"<code>promptsite.model.variable.Variable</code>","text":"<p>Base class for all variable types.</p> <p>Attributes:</p> Name Type Description <code>description</code> <code>str</code> <p>Description of the variable</p> <code>disable_validation</code> <code>bool</code> <p>Whether to disable validation for the variable</p>"},{"location":"api/models/#promptsite.model.variable.Variable.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a Variable instance from a dictionary representation.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Dictionary containing variable configuration</p> required <p>Returns:</p> Name Type Description <code>Variable</code> <code>Variable</code> <p>A new instance of the appropriate Variable subclass</p>"},{"location":"api/models/#promptsite.model.variable.Variable.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the variable instance to a dictionary representation.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary containing the variable type information</p>"},{"location":"api/models/#promptsite.model.variable.Variable.validate","title":"<code>validate(value)</code>","text":"<p>Validate if the given value matches the variable type.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The value to validate</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if value is valid for this variable type, False otherwise</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>This is an abstract method that must be implemented by subclasses</p>"},{"location":"api/models/#promptsite.model.variable.SingleVariable","title":"<code>promptsite.model.variable.SingleVariable</code>","text":"<p>               Bases: <code>Variable</code></p> <p>Base class for simple variable types that don't require complex validation or transformation.</p>"},{"location":"api/models/#promptsite.model.variable.SingleVariable.to_json","title":"<code>to_json(value)</code>","text":"<p>Convert a value to its JSON string representation.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to convert to JSON</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The JSON string representation of the value</p>"},{"location":"api/models/#promptsite.model.variable.ComplexVariable","title":"<code>promptsite.model.variable.ComplexVariable</code>","text":"<p>               Bases: <code>Variable</code></p> <p>Complex variable type that uses Pydantic models for validation and schema handling.</p> <p>This class handles structured data that needs to conform to a specific schema defined by a Pydantic model.</p> <p>Attributes:</p> Name Type Description <code>model</code> <code>BaseModel</code> <p>The Pydantic model used for validation and schema generation</p> <code>is_output</code> <code>bool</code> <p>Whether the variable is an output variable</p>"},{"location":"api/models/#promptsite.model.variable.ComplexVariable.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a ComplexVariable instance from a dictionary representation.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Dictionary containing variable configuration including                   model schema information</p> required <p>Returns:</p> Name Type Description <code>ComplexVariable</code> <code>ComplexVariable</code> <p>A new instance of ComplexVariable with the reconstructed            Pydantic model</p>"},{"location":"api/models/#promptsite.model.variable.ComplexVariable.get_prompt_insert","title":"<code>get_prompt_insert(value, custom_instructions='')</code>","text":"<p>Generate a formatted prompt string with schema and dataset information.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The dataset value to include in the prompt</p> required <code>custom_instructions</code> <code>str</code> <p>Custom instructions template to use.                                Defaults to schema_instructions.</p> <code>''</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Formatted prompt string containing schema and dataset information</p>"},{"location":"api/models/#promptsite.model.variable.ComplexVariable.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the complex variable instance to a dictionary representation.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary containing the variable type, model class name,            and model schema information</p>"},{"location":"api/models/#promptsite.model.variable.ComplexVariable.to_json","title":"<code>to_json(value)</code>","text":"<p>Convert a complex value to its JSON string representation.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to convert to JSON</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The JSON string representation of the value</p>"},{"location":"api/models/#promptsite.model.variable.StringVariable","title":"<code>promptsite.model.variable.StringVariable</code>","text":"<p>               Bases: <code>SingleVariable</code></p> <p>Variable type for string values.</p> <p>Validates that values are Python string instances.</p>"},{"location":"api/models/#promptsite.model.variable.StringVariable.validate","title":"<code>validate(value)</code>","text":"<p>Validate if the given value is a string.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The value to validate</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if value is a string instance, False otherwise</p>"},{"location":"api/models/#promptsite.model.variable.NumberVariable","title":"<code>promptsite.model.variable.NumberVariable</code>","text":"<p>               Bases: <code>SingleVariable</code></p> <p>Variable type for numeric values.</p> <p>Validates that values are Python integer instances.</p>"},{"location":"api/models/#promptsite.model.variable.NumberVariable.validate","title":"<code>validate(value)</code>","text":"<p>Validate if the given value is an integer.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The value to validate</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if value is an integer instance, False otherwise</p>"},{"location":"api/models/#promptsite.model.variable.BooleanVariable","title":"<code>promptsite.model.variable.BooleanVariable</code>","text":"<p>               Bases: <code>SingleVariable</code></p> <p>Variable type for boolean values.</p> <p>Validates that values are Python boolean instances.</p>"},{"location":"api/models/#promptsite.model.variable.BooleanVariable.validate","title":"<code>validate(value)</code>","text":"<p>Validate if the given value is a boolean.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The value to validate</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if value is a boolean instance, False otherwise</p>"},{"location":"api/models/#promptsite.model.variable.ArrayVariable","title":"<code>promptsite.model.variable.ArrayVariable</code>","text":"<p>               Bases: <code>ComplexVariable</code></p> <p>Variable type for array/list values that conform to a Pydantic model schema.</p> <p>Validates that values are Python lists where each item conforms to the specified Pydantic model schema.</p> <p>Attributes:</p> Name Type Description <code>schema_instructions</code> <code>str</code> <p>Template for formatting schema and dataset information</p>"},{"location":"api/models/#promptsite.model.variable.ArrayVariable.validate","title":"<code>validate(value)</code>","text":"<p>Validate if the given value is a list conforming to the model schema.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to validate</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if value is a list and all items conform to the model schema,  False otherwise</p>"},{"location":"api/models/#promptsite.model.variable.ObjectVariable","title":"<code>promptsite.model.variable.ObjectVariable</code>","text":"<p>               Bases: <code>ComplexVariable</code></p> <p>Variable type for object/dict values that conform to a Pydantic model schema.</p> <p>Validates that values are Python dictionaries that conform to the specified Pydantic model schema.</p> <p>Attributes:</p> Name Type Description <code>schema_instructions</code> <code>str</code> <p>Template for formatting schema and dataset information</p>"},{"location":"api/models/#promptsite.model.variable.ObjectVariable.validate","title":"<code>validate(value)</code>","text":"<p>Validate if the given value is a dict conforming to the model schema.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to validate</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if value is a dict and conforms to the model schema,  False otherwise</p>"},{"location":"api/query/","title":"Query API Reference","text":"<p>This page documents the query API functionality of PromptSite.</p>"},{"location":"api/query/#promptsite.query.Query","title":"<code>promptsite.query.Query</code>","text":"<p>Query module for PromptSite.</p> <p>This module provides query functionality for retrieving and filtering prompts, versions, and runs from a PromptSite instance. It includes base Query class and specialized query classes for different types of data.</p> <p>Classes:</p> Name Description <code>Query</code> <p>Base query class providing common query functionality</p> <code>PromptQuery</code> <p>Query class for retrieving and filtering prompts</p> <code>VersionQuery</code> <p>Query class for retrieving and filtering versions</p> <code>RunQuery</code> <p>Query class for retrieving and filtering runs</p> Example <p>ps = PromptSite()</p>"},{"location":"api/query/#promptsite.query.Query--get-all-prompts-as-list-of-dicts","title":"Get all prompts as list of dicts","text":"<p>prompts = ps.prompts.all()</p>"},{"location":"api/query/#promptsite.query.Query--get-all-prompts-as-dataframe","title":"Get all prompts as DataFrame","text":"<p>prompts_df = ps.prompts.as_df()</p>"},{"location":"api/query/#promptsite.query.Query--get-specific-columns-from-versions","title":"Get specific columns from versions","text":"<p>versions_df = ps.versions.only(['version_id', 'content']).as_df()</p>"},{"location":"api/query/#promptsite.query.Query--filter-runs-by-prompt_id","title":"Filter runs by prompt_id","text":"<p>runs_df = ps.runs.where(prompt_id='prompt1').as_df()</p>"},{"location":"api/query/#promptsite.query.Query.__init__","title":"<code>__init__(ps)</code>","text":"<p>Initialize the query.</p> <p>Parameters:</p> Name Type Description Default <code>ps</code> <code>PromptSite</code> <p>PromptSite instance</p> required"},{"location":"api/query/#promptsite.query.Query.all","title":"<code>all()</code>","text":"<p>Get all prompts.</p>"},{"location":"api/query/#promptsite.query.Query.as_df","title":"<code>as_df()</code>","text":"<p>Get the results as a pandas DataFrame.</p>"},{"location":"api/query/#promptsite.query.Query.one","title":"<code>one()</code>","text":"<p>Get the first item in the query.</p>"},{"location":"api/query/#promptsite.query.Query.only","title":"<code>only(columns)</code>","text":"<p>Select only the specified columns.</p>"},{"location":"api/query/#promptsite.query.Query.where","title":"<code>where(**kwargs)</code>","text":"<p>Filter the query.</p>"},{"location":"api/query/#promptsite.query.PromptQuery","title":"<code>promptsite.query.PromptQuery</code>","text":"<p>               Bases: <code>Query</code></p> <p>Query Class for prompts.</p> <p>This class provides a query interface for retrieving and filtering prompts from a PromptSite instance. It allows for selecting specific columns, filtering by attributes, and retrieving the prompts.</p>"},{"location":"api/query/#promptsite.query.PromptQuery.__init__","title":"<code>__init__(ps)</code>","text":"<p>Initialize the query.</p>"},{"location":"api/query/#promptsite.query.PromptQuery.all","title":"<code>all()</code>","text":"<p>Get all prompts.</p> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List[Dict[str, Any]]: A list of dictionaries containing prompt data</p>"},{"location":"api/query/#promptsite.query.PromptQuery.where","title":"<code>where(prompt_id)</code>","text":"<p>Filter the query.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>The ID of the prompt to filter by</p> required <p>Returns:</p> Name Type Description <code>PromptQuery</code> <code>PromptQuery</code> <p>The filtered query</p>"},{"location":"api/query/#promptsite.query.VersionQuery","title":"<code>promptsite.query.VersionQuery</code>","text":"<p>               Bases: <code>Query</code></p> <p>Query Class for versions.</p> <p>This class provides a query interface for retrieving and filtering versions from a PromptSite instance. It allows for selecting specific columns, filtering by attributes, and retrieving the versions.</p>"},{"location":"api/query/#promptsite.query.VersionQuery.__init__","title":"<code>__init__(ps)</code>","text":"<p>Initialize the query.</p> <p>Parameters:</p> Name Type Description Default <code>ps</code> <code>PromptSite</code> <p>PromptSite instance</p> required"},{"location":"api/query/#promptsite.query.VersionQuery.all","title":"<code>all()</code>","text":"<p>Get all versions.</p> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List[Dict[str, Any]]: A list of dictionaries for versions</p>"},{"location":"api/query/#promptsite.query.VersionQuery.where","title":"<code>where(prompt_id, version_id=None)</code>","text":"<p>Filter the query.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>The ID of the prompt to filter by</p> required <code>version_id</code> <code>str</code> <p>The ID of the version to filter by</p> <code>None</code> <p>Returns:</p> Name Type Description <code>VersionQuery</code> <code>VersionQuery</code> <p>The filtered query</p>"},{"location":"api/query/#promptsite.query.RunQuery","title":"<code>promptsite.query.RunQuery</code>","text":"<p>               Bases: <code>Query</code></p> <p>Query Class for runs.</p> <p>This class provides a query interface for retrieving and filtering runs from a PromptSite instance. It allows for selecting specific columns, filtering by attributes, and retrieving the runs.</p>"},{"location":"api/query/#promptsite.query.RunQuery.__init__","title":"<code>__init__(ps)</code>","text":"<p>Initialize the query.</p> <p>Parameters:</p> Name Type Description Default <code>ps</code> <code>PromptSite</code> <p>PromptSite instance</p> required"},{"location":"api/query/#promptsite.query.RunQuery.all","title":"<code>all()</code>","text":"<p>Get all runs.</p> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List[Dict[str, Any]]: A list of dictionaries for runs</p>"},{"location":"api/query/#promptsite.query.RunQuery.where","title":"<code>where(prompt_id, version_id=None, run_id=None)</code>","text":"<p>Filter the query.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>The ID of the prompt to filter by</p> required <code>version_id</code> <code>str</code> <p>The ID of the version to filter by</p> <code>None</code> <code>run_id</code> <code>str</code> <p>The ID of the run to filter by</p> <code>None</code> <p>Returns:</p> Name Type Description <code>RunQuery</code> <code>RunQuery</code> <p>The filtered query</p>"},{"location":"api/storage/","title":"Storage API Reference","text":"<p>This page documents the storage backend functionality of PromptSite.</p>"},{"location":"api/storage/#promptsite.storage.base.StorageBackend","title":"<code>promptsite.storage.base.StorageBackend</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class defining the storage backend interface.</p> <p>This class defines the required interface that all storage implementations must provide. It handles the persistence of prompts, versions, and runs.</p> <p>Implementations should handle the details of storing and retrieving data in their specific storage medium (e.g., file system, git, database).</p>"},{"location":"api/storage/#promptsite.storage.base.StorageBackend.add_run","title":"<code>add_run(prompt_id, version_id, run_data)</code>  <code>abstractmethod</code>","text":"<p>Add a new run to a version. Args:     prompt_id: str - Prompt identifier     version_id: str - Version identifier     run_data: Dict - Raw run data</p>"},{"location":"api/storage/#promptsite.storage.base.StorageBackend.add_version","title":"<code>add_version(prompt_id, version_data)</code>  <code>abstractmethod</code>","text":"<p>Add a new version data to a prompt. Args:     prompt_id: str - Prompt identifier     version_data: Dict - Raw version data</p>"},{"location":"api/storage/#promptsite.storage.base.StorageBackend.create_prompt","title":"<code>create_prompt(prompt_id, prompt_data)</code>  <code>abstractmethod</code>","text":"<p>Create a new prompt in storage. Args:     prompt_id: str - Unique identifier for the prompt     prompt_data: Dict - Raw prompt data containing description, tags, etc.</p>"},{"location":"api/storage/#promptsite.storage.base.StorageBackend.delete_prompt","title":"<code>delete_prompt(prompt_id)</code>  <code>abstractmethod</code>","text":"<p>Delete a prompt and all its versions.</p>"},{"location":"api/storage/#promptsite.storage.base.StorageBackend.get_prompt","title":"<code>get_prompt(prompt_id)</code>  <code>abstractmethod</code>","text":"<p>Retrieve raw prompt data by ID. Returns:     Optional[Dict]: Raw prompt data if found, None otherwise</p>"},{"location":"api/storage/#promptsite.storage.base.StorageBackend.get_version","title":"<code>get_version(prompt_id, version_id)</code>  <code>abstractmethod</code>","text":"<p>Get raw version data. Returns:     Optional[Dict]: Version data if found, None otherwise</p>"},{"location":"api/storage/#promptsite.storage.base.StorageBackend.list_prompts","title":"<code>list_prompts()</code>  <code>abstractmethod</code>","text":"<p>Get a list of all prompt IDs. Returns:     List[str]: List of prompt IDs</p>"},{"location":"api/storage/#promptsite.storage.base.StorageBackend.list_versions","title":"<code>list_versions(prompt_id)</code>  <code>abstractmethod</code>","text":"<p>Get all version data for a prompt. Returns:     List[Dict]: List of version data dictionaries</p>"},{"location":"api/storage/#promptsite.storage.base.StorageBackend.update_prompt","title":"<code>update_prompt(prompt_id, prompt_data)</code>  <code>abstractmethod</code>","text":"<p>Update prompt data. Args:     prompt_id: str - Prompt identifier     prompt_data: Dict - Updated prompt data</p>"},{"location":"api/storage/#promptsite.storage.file.FileStorage","title":"<code>promptsite.storage.file.FileStorage</code>  <code>dataclass</code>","text":"<p>               Bases: <code>StorageBackend</code></p> <p>File-based storage implementation.</p> <p>Implements the StorageBackend interface using a file system structure: - prompts//prompt.yaml: Stores prompt metadata - prompts//versions//version.yaml: Stores version data - prompts//versions//runs/.yaml: Stores run data <p>Attributes:</p> Name Type Description <code>base_path</code> <code>str</code> <p>Base directory for storing all prompt data</p> <code>prompts_dir</code> <code>str</code> <p>Directory containing all prompt data</p> Example <p>storage = FileStorage(base_path=\"/path/to/storage\") storage.create_prompt(\"my-prompt\", prompt_data)</p>"},{"location":"api/storage/#promptsite.storage.file.FileStorage._ensure_path_exists","title":"<code>_ensure_path_exists(path)</code>","text":"<p>Ensure the directory path exists.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Directory path to create</p> required"},{"location":"api/storage/#promptsite.storage.file.FileStorage._get_prompt_path","title":"<code>_get_prompt_path(prompt_id)</code>","text":"<p>Get the full path for a prompt directory.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Full path to the prompt directory</p>"},{"location":"api/storage/#promptsite.storage.file.FileStorage._get_run_path","title":"<code>_get_run_path(prompt_id, version_id, run_id)</code>","text":"<p>Get the full path for a run file.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt</p> required <code>version_id</code> <code>str</code> <p>ID of the version</p> required <code>run_id</code> <code>str</code> <p>ID of the run</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Full path to the run YAML file</p>"},{"location":"api/storage/#promptsite.storage.file.FileStorage._get_version_path","title":"<code>_get_version_path(prompt_id, version_id)</code>","text":"<p>Get the full path for a version directory.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt</p> required <code>version_id</code> <code>str</code> <p>ID of the version</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Full path to the version directory</p>"},{"location":"api/storage/#promptsite.storage.file.FileStorage._path_exists","title":"<code>_path_exists(path)</code>","text":"<p>Check if a path exists.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to check</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if path exists, False otherwise</p>"},{"location":"api/storage/#promptsite.storage.file.FileStorage._read_yaml","title":"<code>_read_yaml(path)</code>","text":"<p>Read data from a YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to the YAML file</p> required <p>Returns:</p> Type Description <code>Optional[Dict]</code> <p>Optional[Dict]: The loaded YAML data or None if file not found</p>"},{"location":"api/storage/#promptsite.storage.file.FileStorage._remove_directory","title":"<code>_remove_directory(path)</code>","text":"<p>Remove a directory and its contents if it exists.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to the directory to remove</p> required"},{"location":"api/storage/#promptsite.storage.file.FileStorage._remove_file","title":"<code>_remove_file(path)</code>","text":"<p>Remove a file if it exists.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to the file to remove</p> required"},{"location":"api/storage/#promptsite.storage.file.FileStorage._write_yaml","title":"<code>_write_yaml(path, data)</code>","text":"<p>Write data to a YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to the YAML file</p> required <code>data</code> <code>Dict</code> <p>Data to write to the file</p> required"},{"location":"api/storage/#promptsite.storage.file.FileStorage.add_run","title":"<code>add_run(prompt_id, version_id, run_data)</code>","text":"<p>Add a new run to a specific version of a prompt.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt</p> required <code>version_id</code> <code>str</code> <p>ID of the version</p> required <code>run_data</code> <code>Dict</code> <p>Run data to store Required keys: - run_id: str</p> required Note <p>Creates the runs directory if it doesn't exist</p>"},{"location":"api/storage/#promptsite.storage.file.FileStorage.add_version","title":"<code>add_version(prompt_id, version_data)</code>","text":"<p>Add a new version to an existing prompt.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt</p> required <code>version_data</code> <code>Dict</code> <p>Version data to add Required keys: - content: str - created_at: datetime - version_id: str Optional keys: - runs: List[Dict] - variables: Dict</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the prompt doesn't exist</p>"},{"location":"api/storage/#promptsite.storage.file.FileStorage.create_prompt","title":"<code>create_prompt(prompt_id, prompt_data)</code>","text":"<p>Create a new prompt in storage.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>Unique identifier for the prompt</p> required <code>prompt_data</code> <code>Dict</code> <p>Dictionary containing prompt metadata and initial version Expected format: {     \"versions\": [{\"version_id\": str, \"content\": str, ...}],     ...other metadata... }</p> required <p>Raises:</p> Type Description <code>KeyError</code> <p>If prompt_data doesn't contain required version data</p>"},{"location":"api/storage/#promptsite.storage.file.FileStorage.delete_prompt","title":"<code>delete_prompt(prompt_id)</code>","text":"<p>Delete a prompt and all its associated data.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt to delete</p> required Note <p>Silently succeeds if the prompt doesn't exist</p>"},{"location":"api/storage/#promptsite.storage.file.FileStorage.get_prompt","title":"<code>get_prompt(prompt_id, exclude_versions=False)</code>","text":"<p>Get prompt data including versions.</p>"},{"location":"api/storage/#promptsite.storage.file.FileStorage.get_version","title":"<code>get_version(prompt_id, version_id)</code>","text":"<p>Get a specific version of a prompt.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt</p> required <code>version_id</code> <code>str</code> <p>ID of the version</p> required <p>Returns:</p> Type Description <code>Optional[Dict]</code> <p>Dictionary containing version data.</p>"},{"location":"api/storage/#promptsite.storage.file.FileStorage.list_prompts","title":"<code>list_prompts(exclude_versions=False)</code>","text":"<p>List all prompts in storage with their complete information.</p> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List of prompt dictionaries containing all metadata, versions, and runs</p>"},{"location":"api/storage/#promptsite.storage.file.FileStorage.list_runs","title":"<code>list_runs(prompt_id, version_id)</code>","text":"<p>List all runs for a specific version.</p> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List of dictionaries containing run data.</p> <code>List[Dict]</code> <p>Each dictionary contains the following keys:</p> <code>List[Dict]</code> <ul> <li>run_id: str</li> </ul> <code>List[Dict]</code> <ul> <li>created_at: datetime</li> </ul>"},{"location":"api/storage/#promptsite.storage.file.FileStorage.list_versions","title":"<code>list_versions(prompt_id, exclude_runs=False)</code>","text":"<p>List all versions for a specific prompt.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt</p> required <code>exclude_runs</code> <code>bool</code> <p>Whether to exclude runs from the version data</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List of dictionaries containing version data.</p> <code>List[Dict]</code> <p>Each dictionary contains the following keys:</p> <code>List[Dict]</code> <ul> <li>version_id: str</li> </ul> <code>List[Dict]</code> <ul> <li>content: str</li> </ul> <code>List[Dict]</code> <ul> <li>created_at: datetime</li> </ul> <ul> <li>runs: List[Dict]</li> </ul>"},{"location":"api/storage/#promptsite.storage.file.FileStorage.update_prompt","title":"<code>update_prompt(prompt_id, prompt_data)</code>","text":"<p>Update an existing prompt's metadata and versions.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>ID of the prompt to update</p> required <code>prompt_data</code> <code>Dict</code> <p>Updated prompt data including metadata and versions Expected format: {     \"versions\": [{\"version_id\": str, \"content\": str, ...}],     ...other metadata... }</p> required Note <ul> <li>Existing versions not included in prompt_data remain unchanged</li> <li>New versions are added</li> <li>Modified versions are completely replaced</li> </ul>"},{"location":"api/storage/#promptsite.storage.git.GitStorage","title":"<code>promptsite.storage.git.GitStorage</code>  <code>dataclass</code>","text":"<p>               Bases: <code>FileStorage</code></p> <p>Git-based storage implementation extending FileStorage.</p> <p>Extends FileStorage to add Git version control capabilities. All operations are automatically committed to the Git repository and can be synced with a remote repository.</p> <p>Attributes:</p> Name Type Description <code>remote</code> <code>str</code> <p>URL of the remote Git repository</p> <code>branch</code> <code>str</code> <p>Git branch to use (defaults to \"main\")</p> <code>auto_sync</code> <code>bool</code> <p>Whether to automatically sync with remote</p> <code>repo</code> <code>Repo</code> <p>GitPython repository instance</p> Example <p>storage = GitStorage( ...     base_path=\"/path/to/repo\", ...     remote=\"https://github.com/user/repo.git\", ...     branch=\"main\", ...     auto_sync=True ... )</p>"},{"location":"api/storage/#promptsite.storage.git.GitStorage.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Initialize the storage.</p>"},{"location":"api/storage/#promptsite.storage.git.GitStorage._commit","title":"<code>_commit(message, files=None)</code>","text":"<p>Create a git commit with the specified message and files.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Commit message</p> required <code>files</code> <code>Optional[List[str]]</code> <p>List of file paths to add to the commit</p> <code>None</code>"},{"location":"api/storage/#promptsite.storage.git.GitStorage._ensure_repo","title":"<code>_ensure_repo()</code>","text":"<p>Ensure git repository exists and is properly configured.</p>"},{"location":"api/storage/#promptsite.storage.git.GitStorage.add_run","title":"<code>add_run(prompt_id, version_id, run_data)</code>","text":"<p>Add a new run to an existing version of a prompt in the Git repository.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>Unique identifier for the prompt</p> required <code>version_id</code> <code>str</code> <p>Unique identifier for the version</p> required <code>run_data</code> <code>Dict</code> <p>Run data including output and metadata</p> required"},{"location":"api/storage/#promptsite.storage.git.GitStorage.add_version","title":"<code>add_version(prompt_id, version_data)</code>","text":"<p>Add a new version to an existing prompt in the Git repository.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>Unique identifier for the prompt</p> required <code>version_data</code> <code>Dict</code> <p>Version data including content and metadata</p> required"},{"location":"api/storage/#promptsite.storage.git.GitStorage.create_prompt","title":"<code>create_prompt(prompt_id, prompt_data)</code>","text":"<p>Create a new prompt in the Git repository.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>Unique identifier for the prompt</p> required <code>prompt_data</code> <code>Dict</code> <p>Prompt data including content and metadata</p> required"},{"location":"api/storage/#promptsite.storage.git.GitStorage.delete_prompt","title":"<code>delete_prompt(prompt_id)</code>","text":"<p>Delete an existing prompt from the Git repository.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>Unique identifier for the prompt</p> required"},{"location":"api/storage/#promptsite.storage.git.GitStorage.sync","title":"<code>sync()</code>","text":"<p>Sync local changes with remote repository if configured.</p>"},{"location":"api/storage/#promptsite.storage.git.GitStorage.update_prompt","title":"<code>update_prompt(prompt_id, prompt_data)</code>","text":"<p>Update an existing prompt in the Git repository.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_id</code> <code>str</code> <p>Unique identifier for the prompt</p> required <code>prompt_data</code> <code>Dict</code> <p>Prompt data including content and metadata</p> required"},{"location":"getting-started/installation/","title":"Installation","text":"<p>PromptSite can be installed using pip:</p> <pre><code>pip install promptsite\n</code></pre>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<p>PromptSite requires Python 3.8 or later and has the following core dependencies:</p> <ul> <li>click: Command line interface toolkit</li> <li>pyyaml: YAML file handling</li> <li>pydantic: Data validation</li> <li>gitpython: Git repository management</li> <li>datamodel-code-generator: Data model code generator</li> <li>pandas: Data analysis library</li> </ul>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>For development, you can clone the repository and install using Poetry:</p> <pre><code># Clone the repository\ngit clone https://github.com/dkuang1980/promptsite.git\ncd promptsite\n\n# Install poetry if you haven't already\npip install poetry\n\n# Install dependencies including development packages\npoetry install\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that PromptSite is installed correctly, run:</p> <pre><code>promptsite --help\n</code></pre> <p>This should display the available commands and options.</p>"},{"location":"getting-started/installation/#storage-backend-configuration","title":"Storage Backend Configuration","text":"<p>PromptSite supports two storage backends:</p>"},{"location":"getting-started/installation/#file-storage-default","title":"File Storage (Default)","text":"<p>Initialize with local file storage:</p> <pre><code>promptsite init\n</code></pre>"},{"location":"getting-started/installation/#git-storage","title":"Git Storage","text":"<p>Initialize with Git storage and remote repository:</p> <pre><code>promptsite init --config '{\"storage_backend\": \"git\", \"remote\": \"https://github.com/user/repo.git\", \"branch\": \"main\"}'\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After installation, check out the Quick Start guide to begin using PromptSite.</p>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues during installation:</p> <ol> <li>Ensure you have Python 3.8 or later installed</li> <li>Check that all dependencies are properly installed</li> <li>Verify your Git configuration if using Git storage backend</li> <li>Make sure you have appropriate permissions for the installation directory</li> </ol> <p>For more detailed troubleshooting, please refer to our documentation or open an issue on our GitHub repository. ```</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with PromptSite by walking through the basic functionality.</p>"},{"location":"getting-started/quickstart/#installation","title":"Installation","text":"<p>First, install PromptSite using pip:</p> <pre><code>pip install promptsite\n</code></pre>"},{"location":"getting-started/quickstart/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/quickstart/#initialize-promptsite","title":"Initialize PromptSite","text":"<p>The first step is to initialize PromptSite. You can use either the file storage (default) or Git storage backend:</p> <pre><code>from promptsite import PromptSite\n\n# Initialize with default file storage\nps = PromptSite()\n</code></pre>"},{"location":"getting-started/quickstart/#managing-prompts","title":"Managing Prompts","text":""},{"location":"getting-started/quickstart/#register-a-new-prompt","title":"Register a New Prompt","text":"<pre><code>prompt = ps.register_prompt(\n    prompt_id=\"translation-prompt\",\n    initial_content=\"Translate this text: {{ text }}\",\n    description=\"Basic translation prompt\",\n    tags=[\"translation\", \"basic\"],\n    variables={\n        \"text\": StringVariable(description=\"The text to translate.\")\n    }\n)\n</code></pre>"},{"location":"getting-started/quickstart/#add-new-versions","title":"Add New Versions","text":"<pre><code>new_version = ps.add_prompt_version(\n    prompt_id=\"translation-prompt\",\n    content=\"Please translate the following text to {{ language }}: {{ text }}\",\n    variables={\n        \"text\": StringVariable(description=\"The text to translate.\"),\n        \"language\": StringVariable(description=\"The language to translate to.\")\n    }\n)\n</code></pre>"},{"location":"getting-started/quickstart/#track-llm-runs","title":"Track LLM Runs","text":"<pre><code>run = ps.add_run(\n    prompt_id=\"translation-prompt\",\n    version_id=new_version.version_id,\n    llm_output=\"Hola mundo\",\n    execution_time=0.5,\n    llm_config={\n        \"model\": \"gpt-4\",\n        \"temperature\": 0.7\n    },\n    variables={\n        \"language\": \"Spanish\",\n        \"text\": \"Hello world\"\n    },\n    final_prompt=\"Please translate the following text to Spanish: Hello world\"\n)\n</code></pre>"},{"location":"getting-started/quickstart/#using-the-decorator-to-automatically-track-llm-runs","title":"Using the Decorator to automatically track LLM runs","text":"<p>PromptSite provides a decorator for easy integration with your existing LLM code:</p> <pre><code>from promptsite.decorator import tracker\nfrom pydantic import BaseModel, Field\nfrom promptsite.model.variable import ArrayVariable\n\nclass Weather(BaseModel):\n    date: str = Field(description=\"The date of the weather data.\")\n    temperature: float = Field(description=\"The temperature in Celsius.\")\n    condition: str = Field(description=\"The weather condition (sunny, rainy, etc).\")\n\n@tracker(\n    prompt_id=\"analyze-weather-prompt\",\n    description=\"Analyze weather data and predict which day is best for a picnic\",\n    tags=[\"weather\", \"analysis\"],\n    variables={\n        \"weather\": ArrayVariable(model=Weather)\n    }\n)\ndef analyze_weather(content=None, llm_config=None, variables=None):\n    response = openai.ChatCompletion.create(\n        model=\"gpt-4\",\n        messages=[{\"role\": \"user\", \"content\": content}]\n    )\n    return response.choices[0].message.content\n\n# Run the function\nanalyze_weather(content=\"\"\"The following dataset describes the weather for each day:\n{{ weather }}\n\nBased on the weather data, predict which day is best for a picnic.\n\"\"\")\n</code></pre>"},{"location":"getting-started/quickstart/#using-the-cli","title":"Using the CLI","text":"<p>PromptSite provides a comprehensive CLI for managing prompts:</p>"},{"location":"getting-started/quickstart/#initialize-storage","title":"Initialize Storage","text":"<pre><code>promptsite init\n</code></pre> <p>For Git storage:</p> <pre><code>promptsite init --config '{\"storage_backend\": \"git\", \"remote\": \"https://github.com/user/repo.git\", \"branch\": \"main\"}'\n</code></pre>"},{"location":"getting-started/quickstart/#basic-promptcommands","title":"Basic PromptCommands","text":"<p>Register a new prompt: <pre><code>promptsite prompt register my-prompt --content \"Translate this text: {{{text}}}\" --description \"Translation prompt\" --tags translation gpt\n</code></pre></p> <p>List all prompts: <pre><code>promptsite prompt list\n</code></pre></p> <p>Add a new version: <pre><code>promptsite version add my-prompt --content \"Please translate the following text: {{{text}}}\"\n</code></pre></p> <p>View version history: <pre><code>promptsite version list my-prompt\n</code></pre></p>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about Configuration</li> <li>Explore different Storage Backends</li> <li>Check out the complete CLI Usage Guide</li> <li>Read about Variable Definitions</li> </ul>"},{"location":"user-guide/cli/","title":"CLI Usage Guide","text":"<p>PromptSite provides a comprehensive command-line interface (CLI) for managing prompts, versions, and runs. This guide covers all available commands and their usage.</p>"},{"location":"user-guide/cli/#basic-commands","title":"Basic Commands","text":""},{"location":"user-guide/cli/#initialize-promptsite","title":"Initialize PromptSite","text":"<p>Before using PromptSite, you need to initialize it in your project directory:</p> <pre><code>promptsite init\n</code></pre> <p>For Git storage backend:</p> <pre><code>promptsite init --config '{\"storage_backend\": \"git\", \"remote\": \"https://github.com/user/repo.git\", \"branch\": \"main\"}'\n</code></pre>"},{"location":"user-guide/cli/#prompt-management","title":"Prompt Management","text":""},{"location":"user-guide/cli/#register-a-new-prompt","title":"Register a New Prompt","text":"<p>Create a new prompt with initial content:</p> <pre><code>promptsite prompt register my-prompt --content \"Translate this text: {{ text }}\" --description \"Translation prompt\" --tags translation gpt\n</code></pre> <p>Options: - <code>--content, -c</code>: Initial prompt content - <code>--description, -d</code>: Prompt description - <code>--tags, -t</code>: Tags for categorizing the prompt (can be used multiple times)</p>"},{"location":"user-guide/cli/#list-all-prompts","title":"List All Prompts","text":"<p>View all registered prompts:</p> <pre><code>promptsite prompt list\n</code></pre> <p>This shows: - Prompt ID - Description - Number of versions - Last update timestamp</p>"},{"location":"user-guide/cli/#get-prompt-details","title":"Get Prompt Details","text":"<p>View details of a specific prompt:</p> <pre><code>promptsite prompt get my-prompt\n</code></pre> <p>Shows: - Prompt ID - Description - Tags - Total versions - Active version - Current content</p>"},{"location":"user-guide/cli/#delete-a-prompt","title":"Delete a Prompt","text":"<p>Remove a prompt and all its versions:</p> <pre><code>promptsite prompt delete my-prompt\n</code></pre> <p>Add <code>--force</code> to skip confirmation:</p> <pre><code>promptsite prompt delete my-prompt --force\n</code></pre>"},{"location":"user-guide/cli/#version-management","title":"Version Management","text":""},{"location":"user-guide/cli/#add-a-new-version","title":"Add a New Version","text":"<p>Create a new version of an existing prompt:</p> <pre><code>promptsite version add my-prompt --content \"Please translate the following text: {{ text }}\"\n</code></pre>"},{"location":"user-guide/cli/#list-versions","title":"List Versions","text":"<p>View all versions of a prompt:</p> <pre><code>promptsite version list my-prompt\n</code></pre> <p>Shows: - Version ID - Creation timestamp - Active version indicator (*)</p>"},{"location":"user-guide/cli/#get-version-details","title":"Get Version Details","text":"<p>View details of a specific version:</p> <pre><code>promptsite version get my-prompt &lt;version-id&gt;\n</code></pre> <p>Shows: - Version content - Creation timestamp - Associated runs</p>"},{"location":"user-guide/cli/#run-management","title":"Run Management","text":""},{"location":"user-guide/cli/#list-runs","title":"List Runs","text":"<p>View all runs for a specific prompt version:</p> <pre><code>promptsite run list my-prompt &lt;version-id&gt;\n</code></pre> <p>Shows: - Run ID - Creation timestamp - Execution time - LLM configuration</p>"},{"location":"user-guide/cli/#get-run-details","title":"Get Run Details","text":"<p>View details of a specific run:</p> <pre><code>promptsite run get my-prompt &lt;version-id&gt; &lt;run-id&gt;\n</code></pre>"},{"location":"user-guide/cli/#get-last-run","title":"Get last run","text":"<p>Get the last run for a specific prompt version:</p> <pre><code>promptsite prompt last-run my-prompt\n</code></pre> <p>Shows: - Run ID - Creation timestamp - Final prompt - LLM output - Variables used - LLM configuration - Execution time</p>"},{"location":"user-guide/cli/#git-integration","title":"Git Integration","text":"<p>If using Git storage backend, sync changes with remote:</p> <pre><code>promptsite sync-git\n</code></pre>"},{"location":"user-guide/cli/#command-help","title":"Command Help","text":"<p>Get help on any command:</p> <pre><code>promptsite --help\npromptsite &lt;command&gt; --help\n</code></pre> <p>List all available commands:</p> <pre><code>promptsite commands\n</code></pre>"},{"location":"user-guide/cli/#storage-structure","title":"Storage Structure","text":"<p>When using PromptSite, the following directory structure is created:</p> <pre><code>.promptsite/\n\u251c\u2500\u2500 prompts/\n\u2502   \u251c\u2500\u2500 &lt;prompt_id&gt;/\n\u2502   \u2502   \u251c\u2500\u2500 prompt.yaml        # Prompt metadata\n\u2502   \u2502   \u2514\u2500\u2500 versions/\n\u2502   \u2502       \u251c\u2500\u2500 &lt;version_id&gt;/\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 version.yaml   # Version data\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 runs/\n\u2502   \u2502       \u2502       \u2514\u2500\u2500 &lt;run_id&gt;.yaml  # Run data\n</code></pre>"},{"location":"user-guide/cli/#environment-variables","title":"Environment Variables","text":"<p>PromptSite respects the following environment variables:</p> <ul> <li><code>PROMPTSITE_CONFIG_PATH</code>: Override default config file location</li> <li><code>PROMPTSITE_STORAGE_BACKEND</code>: Override storage backend setting</li> <li><code>PROMPTSITE_GIT_REMOTE</code>: Set Git remote URL</li> <li><code>PROMPTSITE_GIT_BRANCH</code>: Set Git branch name</li> </ul>"},{"location":"user-guide/cli/#error-handling","title":"Error Handling","text":"<p>The CLI provides clear error messages for common issues:</p> <ul> <li>Uninitialized PromptSite</li> <li>Non-existent prompts</li> <li>Invalid configurations</li> <li>Storage backend errors</li> <li>Git synchronization issues</li> </ul> <p>Each error includes a descriptive message and appropriate exit code for scripting purposes.</p>"},{"location":"user-guide/configuration/","title":"Configuration","text":"<p>PromptSite provides flexible configuration options to customize its behavior according to your needs. This guide covers the available configuration options and how to set them.</p>"},{"location":"user-guide/configuration/#configuration-file","title":"Configuration File","text":"<p>PromptSite uses a YAML configuration file located at <code>.promptsite/config.yaml</code>. This file is created automatically when you initialize PromptSite, but you can modify it manually or through the CLI.</p>"},{"location":"user-guide/configuration/#storage-backend-configuration","title":"Storage Backend Configuration","text":"<p>So far, PromptSite supports two storage backends:</p>"},{"location":"user-guide/configuration/#file-storage-default","title":"File Storage (Default)","text":"<p>The file storage backend stores prompts and related data in your local filesystem. To use file storage:</p> <pre><code>promptsite init\n</code></pre> <p>Or explicitly specify file storage:</p> <pre><code>promptsite init --config '{\"storage_backend\": \"file\"}'\n</code></pre> <pre><code>from promptsite.config import Config\nconfig = Config()\nconfig.save_config({\"storage_backend\": \"file\"})\n</code></pre>"},{"location":"user-guide/configuration/#git-storage","title":"Git Storage","text":"<p>The Git storage backend stores prompts in a Git repository, enabling version control and collaboration. To use Git storage:</p> <pre><code>promptsite init --config '{\"storage_backend\": \"git\", \"remote\": \"https://github.com/user/repo.git\", \"branch\": \"main\"}'\n</code></pre> <pre><code>from promptsite.config import Config\nconfig = Config()\nconfig.save_config({\"storage_backend\": \"git\", \"remote\": \"https://github.com/user/repo.git\", \"branch\": \"main\"})\n</code></pre> <p>Or explicitly specify Git storage: Available Git configuration options:</p> <ul> <li><code>storage_backend</code>: Set to \"git\"</li> <li><code>remote</code>: URL of the Git remote repository</li> <li><code>branch</code>: Git branch to use (defaults to \"main\")</li> <li><code>auto_sync</code>: Whether to automatically sync with remote (defaults to false)</li> </ul>"},{"location":"user-guide/configuration/#auto-sync","title":"Auto Sync","text":"<p>If <code>auto_sync</code> is set to <code>true</code>, PromptSite will automatically sync with the remote repository when you make changes to the prompts. Otherwise, you need to manually sync with the remote repository using <code>ps.sync_git()</code> or run cli command<code>promptsite sync-git</code>.</p> <pre><code>promptsite init --config '{\"storage_backend\": \"git\", \"remote\": \"https://github.com/user/repo.git\", \"branch\": \"main\", \"auto_sync\": true}'\n</code></pre>"},{"location":"user-guide/configuration/#llm-backend-configuration","title":"LLM Backend Configuration","text":"<p>PromptSite supports multiple LLM backends. You can configure the LLM backend and its configuration in the configuration file.</p> <p>The following example shows how to configure the OpenAI backend and its configuration. <pre><code>promptsite init --config '{\"llm_backend\": \"openai\", \"llm_config\": {\"model\": \"gpt-4o-mini\"}}'\n</code></pre></p> <pre><code>from promptsite.config import Config\nconfig = Config()\nconfig.save_config({\"llm_backend\": \"openai\", \"llm_config\": {\"model\": \"gpt-4o-mini\"}})\n</code></pre> <p>The following example shows how to configure the Anthropic backend and its configuration. <pre><code>promptsite init --config '{\"llm_backend\": \"anthropic\", \"llm_config\": {\"model\": \"claude-3-5-sonnet-20240620\"}}'\n</code></pre></p> <pre><code>from promptsite.config import Config\nconfig = Config()\nconfig.save_config({\"llm_backend\": \"anthropic\", \"llm_config\": {\"model\": \"claude-3-5-sonnet-20240620\"}})\n</code></pre> <p>The following example shows how to configure the Ollama backend and its configuration. <pre><code>promptsite init --config '{\"llm_backend\": \"ollama\", \"llm_config\": {\"model\": \"deepseek-r1:8b\"}}'\n</code></pre></p> <pre><code>from promptsite.config import Config\nconfig = Config()\nconfig.save_config({\"llm_backend\": \"ollama\", \"llm_config\": {\"model\": \"deepseek-r1:8b\"}})\n</code></pre>"},{"location":"user-guide/configuration/#storage-structure","title":"Storage Structure","text":"<p>PromptSite organizes prompts in a clear directory structure:</p> <pre><code>.promptsite/\n\u251c\u2500\u2500 prompts/\n\u2502   \u251c\u2500\u2500 &lt;prompt_id&gt;/\n\u2502   \u2502   \u251c\u2500\u2500 prompt.yaml        # Prompt metadata\n\u2502   \u2502   \u2514\u2500\u2500 versions/\n\u2502   \u2502       \u251c\u2500\u2500 &lt;version_id&gt;/\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 version.yaml   # Version data\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 runs/\n\u2502   \u2502       \u2502       \u2514\u2500\u2500 &lt;run_id&gt;.yaml  # Run data\n</code></pre>"},{"location":"user-guide/configuration/#yaml-file-structures","title":"YAML File Structures","text":""},{"location":"user-guide/configuration/#promptyaml","title":"prompt.yaml","text":"<p>This file stores the prompt's metadata:</p> <pre><code>id: translation-prompt\ndescription: A prompt for translating text between languages\ntags: \n  - translation\n  - multilingual\nvariables:\n  text:\n    type: SingleVariable\n  language:\n    type: SingleVariable\ncreated_at: \"2024-01-17T10:30:00Z\"\n</code></pre>"},{"location":"user-guide/configuration/#versionyaml","title":"version.yaml","text":"<p>This file contains data for a specific version of the prompt:</p> <pre><code>version_id: v1_a1b2c3\ncontent: \"Please translate the following text to {{ language }}: {{ text }}\"\ncreated_at: \"2024-01-17T10:30:00Z\"\nvariables:\n  text:\n    type: SingleVariable\n  language:\n    type: SingleVariable\n</code></pre> <p>For versions with complex variables using Pydantic models:</p> <pre><code>version_id: v2_x1y2z3\ncontent: \"Generate a greeting for this person: {{ person }}\"\ncreated_at: \"2024-01-17T11:45:00Z\"\nvariables:\n  person:\n    type: ComplexVariable\n    model_class: Person\n    model:\n      title: Person\n      type: object\n      properties:\n        first_name:\n          type: string\n          description: The person's first name\n        last_name:\n          type: string\n          description: The person's last name\n        age:\n          type: integer\n          description: Age in years\n      required:\n        - first_name\n        - last_name\n</code></pre>"},{"location":"user-guide/configuration/#runyaml","title":"run.yaml","text":"<p>This file stores data from each execution of a prompt version:</p> <pre><code>run_id: run_123abc\ncreated_at: \"2024-01-17T10:35:00Z\"\nrun_at: \"2024-01-17T10:35:02Z\"\nfinal_prompt: \"Please translate the following text to Spanish: Hello world\"\nvariables:\n  language: Spanish\n  text: Hello world\nllm_output: \"Hola mundo\"\nexecution_time: 0.5\nllm_config:\n  model: gpt-4\n  temperature: 0.7\n  max_tokens: 100\n</code></pre> <p>For runs with complex variable inputs:</p> <pre><code>run_id: run_456def\ncreated_at: \"2024-01-17T11:50:00Z\"\nrun_at: \"2024-01-17T11:50:03Z\"\nfinal_prompt: \"Generate a greeting for this person: {\\\"first_name\\\": \\\"John\\\", \\\"last_name\\\": \\\"Doe\\\", \\\"age\\\": 30}\"\nvariables:\n  person:\n    first_name: John\n    last_name: Doe\n    age: 30\nllm_output: \"Hello John Doe! How does it feel to be 30?\"\nexecution_time: 0.8\nllm_config:\n  model: gpt-4\n  temperature: 0.5\n  max_tokens: 150\n</code></pre>"},{"location":"user-guide/configuration/#field-descriptions","title":"Field Descriptions","text":""},{"location":"user-guide/configuration/#promptyaml-fields","title":"prompt.yaml Fields","text":"<ul> <li><code>id</code>: Unique identifier for the prompt</li> <li><code>description</code>: Human-readable description of the prompt's purpose</li> <li><code>tags</code>: List of categorization tags</li> <li><code>variables</code>: Dictionary of variable definitions used in the prompt</li> <li><code>created_at</code>: Timestamp of prompt creation</li> </ul>"},{"location":"user-guide/configuration/#versionyaml-fields","title":"version.yaml Fields","text":"<ul> <li><code>version_id</code>: Unique identifier for this version</li> <li><code>content</code>: The actual prompt template with variable placeholders</li> <li><code>created_at</code>: Timestamp of version creation</li> <li><code>variables</code>: Dictionary of variable definitions specific to this version (inherits from prompt.yaml if not specified)</li> </ul>"},{"location":"user-guide/configuration/#runyaml-fields","title":"run.yaml Fields","text":"<ul> <li><code>run_id</code>: Unique identifier for this execution</li> <li><code>created_at</code>: Timestamp when run record was created</li> <li><code>run_at</code>: Timestamp of actual execution</li> <li><code>final_prompt</code>: The fully rendered prompt with variables replaced</li> <li><code>variables</code>: The actual values used for variables in this run</li> <li><code>llm_output</code>: The response from the language model</li> <li><code>execution_time</code>: Time taken in seconds</li> <li><code>llm_config</code>: Configuration used for the language model</li> </ul>"},{"location":"user-guide/configuration/#configuration-through-code","title":"Configuration Through Code","text":"<p>You can also configure PromptSite programmatically:</p> <pre><code>from promptsite import PromptSite\nfrom promptsite.config import Config\n\n# Configure Git storage\nconfig = Config()\nconfig.save_config({\n    \"storage_backend\": \"git\",\n    \"remote\": \"https://github.com/user/repo.git\",\n    \"branch\": \"main\",\n    \"auto_sync\": True\n})\n\n# Initialize PromptSite with config\nps = PromptSite(config.get_storage_backend())\n</code></pre>"},{"location":"user-guide/configuration/#default-configuration","title":"Default Configuration","text":"<p>If no configuration is provided, PromptSite uses these defaults:</p> <pre><code>storage_backend: file\nbase_directory: .promptsite\n</code></pre>"},{"location":"user-guide/configuration/#configuration-validation","title":"Configuration Validation","text":"<p>PromptSite validates your configuration when initializing. Invalid configurations will raise a <code>ConfigError</code> with details about the issue.</p> <p>Example error handling:</p> <pre><code>from promptsite.exceptions import ConfigError\n\ntry:\n    config = Config()\n    config.save_config({\n        \"storage_backend\": \"invalid_backend\"\n    })\nexcept ConfigError as e:\n    print(f\"Configuration error: {str(e)}\")\n</code></pre>"},{"location":"user-guide/configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Version Control: When using Git storage, commit your <code>.promptsite/config.yaml</code> file to version control</li> <li>File Backend: Use the File backend for fast development, it will get you started quickly</li> <li>Git Backend: Use the Git backend when you need to collaborate with others, choose different <code>branch</code> to work on</li> <li>Backup: Regularly backup your prompt data, especially when using file storage</li> <li>Documentation: Document any custom configuration for team collaboration</li> </ol>"},{"location":"user-guide/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Storage Backends in detail</li> <li>Explore CLI Usage for managing prompts</li> <li>Check out Python API for programmatic control</li> </ul>"},{"location":"user-guide/dataset/","title":"Synthetic Datasets","text":"<p>The Dataset class in PromptSite provides functionality for managing and generating structured data that can be used in your prompts.</p>"},{"location":"user-guide/dataset/#basic-usage","title":"Basic Usage","text":""},{"location":"user-guide/dataset/#creating-a-dataset","title":"Creating a Dataset","text":"<p>To create a dataset, you need to define a Pydantic model for your data structure and use either <code>ArrayVariable</code> or <code>ObjectVariable</code>:</p> <pre><code>from pydantic import BaseModel, Field\nfrom promptsite.model.dataset import Dataset\nfrom promptsite.model.variable import ArrayVariable\n\nclass CustomerModel(BaseModel):\n    id: int = Field(description=\"The id of the customer\")\n    name: str = Field(description=\"The name of the customer\")\n    age: int = Field(description=\"The age of the customer\")\n    gender: str = Field(description=\"The gender of the customer\")\n\n# Create a dataset with existing data\ncustomers = Dataset(\n    id=\"customers\",\n    variable=ArrayVariable(model=CustomerModel),\n    data=[\n        {\"id\": 1, \"name\": \"John\", \"age\": 25, \"gender\": \"Male\"},\n        {\"id\": 2, \"name\": \"Jane\", \"age\": 22, \"gender\": \"Female\"}\n    ],\n    description=\"Customer dataset\"\n)\n</code></pre>"},{"location":"user-guide/dataset/#working-with-related-datasets","title":"Working with Related Datasets","text":"<p>You can create relationships between datasets using field references:</p> <pre><code>class OrderModel(BaseModel):\n    id: int = Field(description=\"The id of the order\")\n    customer_id: int = Field(description=\"The id of the customer\")\n    amount: float = Field(description=\"The amount of the order\")\n\norders = Dataset(\n    id=\"orders\",\n    variable=ArrayVariable(model=OrderModel),\n    data=[\n        {\"id\": 1, \"customer_id\": 1, \"amount\": 100},\n        {\"id\": 2, \"customer_id\": 2, \"amount\": 200}\n    ],\n    description=\"Order dataset\",\n    relationships={\n        \"customer_id\": customers[\"id\"] # Establish relationship with customers dataset\n    }\n)\n</code></pre>"},{"location":"user-guide/dataset/#converting-to-dataframe","title":"Converting to DataFrame","text":"<p>You can easily convert a dataset to a pandas DataFrame:</p> <pre><code>df = customers.to_df()\n</code></pre>"},{"location":"user-guide/dataset/#generating-data","title":"Generating Data","text":"<p>PromptSite provides powerful data generation capabilities using LLMs. You can generate data that matches your schema and requirements:</p>"},{"location":"user-guide/dataset/#configure-your-llm-backend","title":"Configure your LLM backend","text":"<pre><code>from promptsite.config import Config\n\nconfig = Config()\nconfig.save_config({\"llm_backend\": \"openai\", \"llm_config\": {\"model\": \"gpt-4o-mini\"}})\n</code></pre>"},{"location":"user-guide/dataset/#simple-dataset-generation","title":"Simple Dataset Generation","text":"<pre><code>from promptsite.model.dataset import Dataset\nfrom promptsite.model.variable import ArrayVariable\n\nclass CustomerModel(BaseModel):\n    id: int = Field(description=\"The id of the customer\")\n    name: str = Field(description=\"The name of the customer\")\n    age: int = Field(description=\"The age of the customer\")\n    gender: str = Field(description=\"The gender of the customer\")\n\ncustomers = Dataset.generate(\n    id=\"customers_between_20_and_30\",\n    variable=ArrayVariable(model=CustomerModel, description=\"The customers for product A\"),\n    description=\"Customers between 20 and 30 years old\"\n)\n</code></pre>"},{"location":"user-guide/dataset/#generating-relatioanal-dataset","title":"Generating relatioanal Dataset","text":"<p>You can generate data with relationships with existing datasets:</p> <pre><code>class OrderModel(BaseModel):\n    id: int = Field(description=\"The id of the order\")\n    customer_id: int = Field(description=\"The id of the customer\")\n    amount: float = Field(description=\"The amount of the order\")\n\norders = Dataset.generate(\n    id=\"orders_below_100\",\n    variable=ArrayVariable(model=OrderModel, description=\"orders\"),\n    description=\"Orders below 100 dollars\",\n    relationships={\"customer_id\": customers[\"id\"]} # Maintain relationship with \"customers\" dataset\n)\n</code></pre>"},{"location":"user-guide/dataset/#controlling-generation-size","title":"Controlling Generation Size","text":"<p>You can specify the number of rows to generate:</p> <pre><code>customers = Dataset.generate(\n    id=\"female_customers\",\n    variable=ArrayVariable(model=CustomerModel),\n    description=\"Female customers\",\n    num_rows=5 # Generate exactly 5 customers\n)\n</code></pre>"},{"location":"user-guide/decorator/","title":"Decorator Usage","text":"<p>The <code>@tracker</code> decorator provides a simple way to automatically track prompt executions in your existing LLM code. This guide covers how to use the decorator effectively.</p>"},{"location":"user-guide/decorator/#basic-usage","title":"Basic Usage","text":"<p>The most basic usage of the decorator requires only a prompt ID:</p> <pre><code>from promptsite.decorator import tracker\n\n@tracker(prompt_id=\"my-prompt\")\ndef call_llm(content=None, llm_config=None, variables=None):\n    # Your LLM call logic here\n    return response\n</code></pre>"},{"location":"user-guide/decorator/#full-configuration","title":"Full Configuration","text":"<p>The decorator supports several configuration options:</p> <pre><code>from promptsite.model.variable import ArrayVariable\nfrom pydantic import BaseModel, Field\n\nclass Weather(BaseModel):\n    date: str = Field(description=\"The date of the weather data\")\n    temperature: float = Field(description=\"The temperature in Celsius\")\n    condition: str = Field(description=\"The weather condition (sunny, rainy, etc)\")\n\n@tracker(\n    prompt_id=\"weather-prompt\",\n    description=\"Weather prompt with structured data\",\n    tags=[\"weather\", \"weather-analysis\"],\n    ps_config={\"storage_backend\": \"git\"},\n    llm_config={\"temperature\": 0.7},\n    variables={\n        \"weather\": ArrayVariable(Weather)  # Pydantic model \n    }\n)\ndef translate_text(content=None, llm_config=None, variables=None):\n    # LLM call implementation\n    pass\n</code></pre>"},{"location":"user-guide/decorator/#variable-validation","title":"Variable Validation","text":"<p>The decorator supports Pydantic models for variable validation. </p> <p>You can disable validation of variables by setting the <code>disable_validation</code> flag to <code>True</code>. It is useful when you have validated the variables in the prompt, it can reduce the run time of the decorated function. See the example below:</p> <pre><code>@tracker(\n    prompt_id=\"my-prompt-with-disable-validation\",\n    variables={\n        \"weather\": ArrayVariable(model=Weather, disable_validation=True)  # Disable validation of the variable\n    }\n)\ndef my_function(content=None, **kwargs):\n    return llm_call(content)\n\nmy_function(\n    content=\"This is a test\", \n    variables={\"weather\": [{\"date\": \"2021-01-01\", \"temperature\": 20, \"condition\": \"sunny\"}]}\n)\n</code></pre>"},{"location":"user-guide/decorator/#automatic-run-tracking","title":"Automatic Run Tracking","text":"<p>The decorator automatically tracks: - Execution time - LLM configuration - Input variables - Final prompt - LLM output</p> <p>Example tracked run data:</p> <p>```python:tests/test_decorator.py startLine: 58 endLine: 65 <pre><code>## Configuration Options\n\nThe `@tracker` decorator accepts the following parameters:\n\n- `prompt_id` (str, required): Unique identifier for the prompt\n- `content` (str, optional): Default content for the prompt\n- `description` (str, optional): Description of the prompt\n- `tags` (List[str], optional): Tags for categorizing the prompt\n- `ps_config` (Dict, optional): PromptSite configuration\n- `ps` (PromptSite, optional): Existing PromptSite instance\n- `llm_config` (Dict, optional): Default LLM configuration\n- `variables` (Dict, optional): Variable definitions using Pydantic models\n\n## Working with Variables\n\nThe decorator supports both simple and complex variable types:\n\n### Simple Variables\n\n```python\nfrom promptsite.model.variable import StringVariable\n\n@tracker(\n    prompt_id=\"simple-prompt\",\n    variables={\n        \"text\": StringVariable()\n    }\n)\ndef process_text(content=None, variables=None):\n    return llm_call(content)\n</code></pre></p>"},{"location":"user-guide/decorator/#complex-variables","title":"Complex Variables","text":"<pre><code>from pydantic import BaseModel, Field\n\nclass Weather(BaseModel):\n    date: str = Field(description=\"The date of the weather data\")\n    temperature: float = Field(description=\"The temperature in Celsius\")\n    condition: str = Field(description=\"The weather condition (sunny, rainy, etc)\")\n\n@tracker(\n    prompt_id=\"complex-prompt\",\n    variables={\n        \"weather\": ArrayVariable(Weather)\n    }\n)\ndef process_weather(content=None, variables=None):\n    return llm_call(content)\n</code></pre>"},{"location":"user-guide/decorator/#error-handling","title":"Error Handling","text":"<p>The decorator will raise appropriate exceptions for: - Missing required variables - Invalid variable types - Configuration errors - Storage backend issues</p> <p>Example error handling:</p> <pre><code>try:\n    @tracker(prompt_id=\"my-prompt\")\n    def my_function():\n        pass\nexcept ConfigError as e:\n    print(f\"Configuration error: {e}\")\nexcept PromptNotFoundError as e:\n    print(f\"Prompt not found: {e}\")\n</code></pre>"},{"location":"user-guide/decorator/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Variable Validation: Always define Pydantic models for complex variables to ensure proper validation</p> </li> <li> <p>Error Handling: Implement proper error handling for potential exceptions</p> </li> <li> <p>Define PromptSite Instance: Pass the PromptSite instance to the decorator to use the same instance for all decorators, this is useful when you want to use the same PromptSite instance to do other operations (i.e. get prompt, get version, get run, etc.)</p> </li> </ol>"},{"location":"user-guide/decorator/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Variable Definitions</li> <li>Explore the Python API</li> <li>Check out CLI Usage ```</li> </ul>"},{"location":"user-guide/python-api/","title":"Python API Reference","text":"<p>This guide covers the core Python API for PromptSite, showing how to programmatically manage prompts, versions, and runs.</p>"},{"location":"user-guide/python-api/#core-api","title":"Core API","text":""},{"location":"user-guide/python-api/#initialization","title":"Initialization","text":"<p>Initialize PromptSite with either file storage (default) or Git storage:</p> <pre><code>from promptsite import PromptSite\nfrom promptsite.config import Config\n\n# Default file storage\nps = PromptSite()\n\n# Or with Git storage\nconfig = Config()\nconfig.save_config({\n    \"storage_backend\": \"git\",\n    \"remote\": \"https://github.com/user/repo.git\",\n    \"branch\": \"main\"\n})\nps = PromptSite(config.get_storage_backend())\n</code></pre>"},{"location":"user-guide/python-api/#managing-prompts","title":"Managing Prompts","text":""},{"location":"user-guide/python-api/#register-a-new-prompt","title":"Register a New Prompt","text":"<pre><code>prompt = ps.register_prompt(\n    prompt_id=\"translation-prompt\",\n    initial_content=\"Translate this text: {{ text }}\",\n    description=\"Basic translation prompt\", \n    tags=[\"translation\", \"basic\"]\n)\n</code></pre>"},{"location":"user-guide/python-api/#get-prompt-details","title":"Get Prompt Details","text":"<pre><code>prompt = ps.get_prompt(\"translation-prompt\")\nprint(f\"ID: {prompt.id}\")\nprint(f\"Description: {prompt.description}\")\nprint(f\"Tags: {prompt.tags}\")\n</code></pre>"},{"location":"user-guide/python-api/#list-all-prompts","title":"List All Prompts","text":"<pre><code>prompts = ps.list_prompts()\nfor prompt in prompts:\n    print(f\"Prompt ID: {prompt.id}\")\n</code></pre>"},{"location":"user-guide/python-api/#delete-a-prompt","title":"Delete a Prompt","text":"<pre><code>ps.delete_prompt(\"translation-prompt\")\n</code></pre>"},{"location":"user-guide/python-api/#managing-versions","title":"Managing Versions","text":""},{"location":"user-guide/python-api/#add-a-new-version","title":"Add a New Version","text":"<pre><code>new_version = ps.add_prompt_version(\n    prompt_id=\"translation-prompt\",\n    content=\"Please translate to {{ language }}: {{ text }}\"\n)\n</code></pre>"},{"location":"user-guide/python-api/#get-version-details","title":"Get Version Details","text":"<pre><code>version = ps.get_version(\"translation-prompt\", version_id)\nprint(f\"Content: {version.content}\")\nprint(f\"Created: {version.created_at}\")\n</code></pre>"},{"location":"user-guide/python-api/#list-all-versions","title":"List All Versions","text":"<pre><code>versions = ps.list_versions(\"translation-prompt\")\nfor version in versions:\n    print(f\"Version ID: {version.version_id}\")\n    print(f\"Content: {version.content}\")\n</code></pre>"},{"location":"user-guide/python-api/#find-version-by-content","title":"Find Version by Content","text":"<pre><code>version = ps.get_version_by_content(\n    prompt_id=\"translation-prompt\",\n    content=\"Please translate to {{ language }}: {{ text }}\"\n)\n</code></pre>"},{"location":"user-guide/python-api/#tracking-runs","title":"Tracking Runs","text":""},{"location":"user-guide/python-api/#add-a-run","title":"Add a Run","text":"<pre><code>run = ps.add_run(\n    prompt_id=\"translation-prompt\",\n    version_id=version_id,\n    llm_output=\"Hola mundo\",\n    execution_time=0.5,\n    llm_config={\n        \"model\": \"gpt-4\",\n        \"temperature\": 0.7\n    },\n    variables={\n        \"language\": \"Spanish\",\n        \"text\": \"Hello world\"\n    },\n    final_prompt=\"Please translate to Spanish: Hello world\"\n)\n</code></pre>"},{"location":"user-guide/python-api/#list-runs-for-a-version","title":"List Runs for a Version","text":"<pre><code>runs = ps.list_runs(\n    prompt_id=\"translation-prompt\",\n    version_id=version_id\n)\nfor run in runs:\n    print(f\"Run ID: {run.run_id}\")\n    print(f\"Output: {run.llm_output}\")\n    print(f\"Execution Time: {run.execution_time}s\")\n</code></pre>"},{"location":"user-guide/python-api/#get-run-details","title":"Get Run Details","text":"<pre><code>run = ps.get_run(\n    prompt_id=\"translation-prompt\",\n    run_id=run_id\n)\nprint(f\"Run ID: {run.run_id}\")\nprint(f\"Output: {run.llm_output}\")\nprint(f\"Execution Time: {run.execution_time}s\")\n</code></pre>"},{"location":"user-guide/python-api/#get-last-run","title":"Get Last Run","text":"<pre><code>run = ps.get_last_run(\n    prompt_id=\"translation-prompt\"\n)\nprint(f\"Run ID: {run.run_id}\")\nprint(f\"Output: {run.llm_output}\")\nprint(f\"Execution Time: {run.execution_time}s\")\n</code></pre>"},{"location":"user-guide/python-api/#use-query-api","title":"Use Query API","text":"<p>PromptSite supports a query API to get prompts, versions and runs.</p>"},{"location":"user-guide/python-api/#get-all-prompts","title":"Get All Prompts","text":"<pre><code>prompts = ps.prompts.all()\n</code></pre>"},{"location":"user-guide/python-api/#get-all-versions-for-a-prompt","title":"Get All Versions for a Prompt","text":"<pre><code>versions = ps.versions.where(prompt_id=\"translation-prompt\").all()\n</code></pre>"},{"location":"user-guide/python-api/#get-all-runs-for-a-prompt","title":"Get All Runs for a Prompt","text":"<pre><code>runs = ps.runs.where(prompt_id=\"translation-prompt\").all()\n</code></pre>"},{"location":"user-guide/python-api/#get-all-runs-for-a-version","title":"Get All Runs for a Version","text":"<pre><code>runs = ps.runs.where(prompt_id=\"translation-prompt\", version_id=\"translation-prompt-1\").all()\n</code></pre>"},{"location":"user-guide/python-api/#limit-the-columns-returned","title":"Limit the columns returned","text":"<pre><code>runs = ps.runs.where(prompt_id=\"translation-prompt\", version_id=\"translation-prompt-1\").only([\"run_id\", \"llm_output\", \"execution_time\"]).all()\n</code></pre>"},{"location":"user-guide/python-api/#get-the-prompt-as-a-dictionary","title":"Get the prompt as a dictionary","text":"<pre><code>prompt = ps.prompts.where(prompt_id=\"translation-prompt\").one()\n</code></pre>"},{"location":"user-guide/python-api/#get-the-versions-as-a-dataframe","title":"Get the versions as a dataframe","text":"<pre><code>versions = ps.versions.where(prompt_id=\"translation-prompt\").as_df()\n</code></pre>"},{"location":"user-guide/python-api/#get-the-runs-as-a-dataframe","title":"Get the runs as a dataframe","text":"<pre><code>runs = ps.runs.where(prompt_id=\"translation-prompt\").as_df()\n</code></pre>"},{"location":"user-guide/python-api/#using-variables","title":"Using Variables","text":"<p>PromptSite supports both simple and complex variable types:</p>"},{"location":"user-guide/python-api/#simple-variables","title":"Simple Variables","text":"<pre><code>from promptsite.model.variable import SingleVariable\n\nprompt = ps.register_prompt(\n    prompt_id=\"simple-prompt\",\n    initial_content=\"Hello {{ name }}!\",\n    variables={\n        \"name\": SingleVariable()\n    }\n)\n</code></pre>"},{"location":"user-guide/python-api/#complex-variables-with-pydantic-models","title":"Complex Variables with Pydantic Models","text":"<pre><code>from pydantic import BaseModel, Field\nfrom promptsite.model.variable import ComplexVariable\n\nclass Person(BaseModel):\n    first_name: str = Field(description=\"First name\")\n    last_name: str = Field(description=\"Last name\")\n    age: int = Field(description=\"Age in years\")\n\nprompt = ps.register_prompt(\n    prompt_id=\"complex-prompt\",\n    initial_content=\"Generate profile for: {{ person }}\",\n    variables={\n        \"person\": ComplexVariable(model=Person)\n    }\n)\n</code></pre>"},{"location":"user-guide/python-api/#git-integration","title":"Git Integration","text":"<p>When using Git storage backend, you can sync with the remote repository using <code>ps.sync_git()</code>.</p> <pre><code># Sync with remote repository\nps.sync_git()\n</code></pre> <p>The API uses custom exceptions for error handling:</p> <pre><code>from promptsite.exceptions import (\n    PromptNotFoundError,\n    PromptAlreadyExistsError,\n    InvalidPromptContentError,\n    StorageError\n)\n\ntry:\n    prompt = ps.get_prompt(\"nonexistent-prompt\")\nexcept PromptNotFoundError:\n    print(\"Prompt not found\")\nexcept StorageError as e:\n    print(f\"Storage error: {str(e)}\")\n</code></pre>"},{"location":"user-guide/python-api/#best-practices","title":"Best Practices","text":"<ol> <li>Error Handling: Always wrap API calls in try-except blocks to handle potential errors</li> <li>Run Tracking: Include comprehensive metadata in run tracking for better analysis</li> <li>Git Storage: Regularly sync with remote when using Git storage backend</li> <li>Variable Validation: Use Pydantic models for complex variable validation</li> </ol>"},{"location":"user-guide/python-api/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about the CLI Interface</li> <li>Explore Variable Definitions</li> <li>Check out Decorator Usage</li> </ul>"},{"location":"user-guide/variable-definitions/","title":"Variable Definitions","text":"<p>PromptSite provides a flexible system for defining and validating variables used in your prompts. This guide covers the different types of variables available and how to use them effectively.</p>"},{"location":"user-guide/variable-definitions/#variable-types","title":"Variable Types","text":"<p>PromptSite supports several variable types to handle different kinds of inputs:</p>"},{"location":"user-guide/variable-definitions/#simple-variables","title":"Simple Variables","text":"<ol> <li>StringVariable: For text inputs</li> <li>NumberVariable: For numeric values</li> <li>BooleanVariable: For true/false values</li> </ol>"},{"location":"user-guide/variable-definitions/#complex-variables","title":"Complex Variables","text":"<ol> <li>ArrayVariable: For lists/arrays of values</li> <li>ObjectVariable: For structured data using Pydantic models</li> </ol>"},{"location":"user-guide/variable-definitions/#using-variables-in-code","title":"Using Variables in Code","text":""},{"location":"user-guide/variable-definitions/#simple-variable-example","title":"Simple Variable Example","text":"<pre><code>from promptsite import PromptSite\nfrom promptsite.model.variable import StringVariable\n\nps = PromptSite()\n\n# Register prompt with string variable\nps.register_prompt(\n    prompt_id=\"greeting\",\n    initial_content=\"Hello {{ name }}!\",\n    variables={\n        \"name\": StringVariable()\n    }\n)\n</code></pre>"},{"location":"user-guide/variable-definitions/#complex-variable-example","title":"Complex Variable Example","text":"<pre><code>from promptsite.decorator import tracker\nfrom pydantic import BaseModel, Field\nfrom promptsite.model.variable import ArrayVariable\n\nclass Weather(BaseModel):\n    date: str = Field(description=\"The date of the weather data.\")\n    temperature: float = Field(description=\"The temperature in Celsius.\")\n    condition: str = Field(description=\"The weather condition (sunny, rainy, etc).\")\n\nps = PromptSite()\n\n# Register prompt with complex variable\nps.register_prompt(\n    prompt_id=\"weather-analysis\",\n    initial_content=\"Analyze the following weather data: {{ weather }}\",\n    variables={\n        \"weather\": ArrayVariable(model=Weather)\n    }\n)\n</code></pre>"},{"location":"user-guide/variable-definitions/#variable-validation","title":"Variable Validation","text":"<p>Variables are automatically validated when used in prompts. The validation ensures:</p> <ol> <li>All required variables are provided</li> <li>Values match their expected types</li> <li>Complex objects conform to their Pydantic models</li> </ol> <p>We validate the values of the variables in the decorator @tracker when the final prompt is built.</p> <p>You can disable validation of variables by setting the <code>disable_validation</code> flag to <code>True</code>. It is useful when you have validated the variables in the prompt, it can reduce the run time of the decorated function. See the example below:</p> <pre><code>ArrayVariable(model=Weather, disable_validation=True)  # Disable validation of the variable\n</code></pre>"},{"location":"user-guide/variable-definitions/#array-variables","title":"Array Variables","text":"<p>Array variables are particularly useful for handling lists of structured data. They support Pydantic models as their item type:</p> <pre><code>from promptsite.model.variable import ArrayVariable\n\nps.register_prompt(\n    prompt_id=\"group-greeting\",\n    initial_content=\"Analyze the following weather data: {{ weather }}\",\n    variables={\n        \"weather\": ArrayVariable(model=Weather)\n    }\n)\n</code></pre>"},{"location":"user-guide/variable-definitions/#variable-schema-instructions","title":"Variable Schema Instructions","text":"<p>When using complex variables, PromptSite automatically generates schema instructions for the LLM. These instructions help the model understand the expected structure of the data.</p> <p>For example, with an ArrayVariable:</p> <pre><code>@tracker(\n    prompt_id=\"group-greeting\",\n    description=\"Greeting for multiple people\",\n    variables={\n        \"people\": ArrayVariable(Person)\n    }\n)\ndef greet_people(content=None, llm_config=None, variables=None):\n    # The content will include schema instructions\n    return llm_call(content)\n</code></pre>"},{"location":"user-guide/variable-definitions/#output-variables","title":"Output Variables","text":"<p>Output variables are variables that are returned by the LLM. To define an output variable, you need to set the <code>is_output</code> attribute to <code>True</code> in the variable definition.</p> <pre><code>from promptsite.model.variable import ArrayVariable\n\nclass Weather(BaseModel):\n    date: str = Field(description=\"The date of the weather data.\")\n    temperature: float = Field(description=\"The temperature in Celsius.\")\n    condition: str = Field(description=\"The weather condition (sunny, rainy, etc).\")\n\nclass Prediction(BaseModel):\n    date: str = Field(description=\"The date of the weather data.\")\n    temperature: float = Field(description=\"The temperature in Celsius.\")\n    condition: str = Field(description=\"The weather condition (sunny, rainy, etc).\")\n\nps.register_prompt(\n    prompt_id=\"weather-prediction\",\n    initial_content=\"Predict the weather for the next 7 days based on \\n {{ last_week_weather }} \\n\\n {{ prediction }}\",\n    variables={\n        \"last_week_weather\": ArrayVariable(Weather),\n        \"prediction\": ArrayVariable(Prediction, is_output=True)\n    }\n)\n</code></pre>"},{"location":"user-guide/variable-definitions/#storage-format","title":"Storage Format","text":"<p>Variables are stored in YAML format along with their prompts and versions. Here's an example of how they're stored:</p> <pre><code>version_id: v1\ncontent: \"Analyze the following weather data: {{ weather }}\"\nvariables:\n  weather:\n    type: ComplexVariable\n    model_class: Weather\n    model:\n      title: Weather\n      type: object\n      properties:\n        date:\n          type: string\n          description: The date of the weather data\n        temperature:\n          type: number\n          description: The temperature in Celsius\n        condition:\n          type: string\n          description: The weather condition (sunny, rainy, etc)\n      required:\n        - date\n        - temperature\n        - condition\n</code></pre>"},{"location":"user-guide/variable-definitions/#best-practices","title":"Best Practices","text":"<ol> <li>Type Safety: Always use appropriate variable types to ensure data validation</li> <li>Documentation: Include descriptions in your Pydantic models to help document the expected data</li> <li>Validation: Take advantage of Pydantic's validation features for complex variables</li> <li>Reusability: Define common variable models in a central location for reuse</li> <li>Schema Instructions: Consider customizing schema instructions for complex variables when needed</li> </ol>"},{"location":"user-guide/variable-definitions/#variable-inheritance","title":"Variable Inheritance","text":"<p>Variables can be defined at both the prompt and version level:</p> <ol> <li>Prompt-level variables are inherited by all versions</li> <li>Version-level variables override prompt-level variables</li> <li>Each version can define its own variable set</li> </ol> <p>Example:</p> <pre><code># Define prompt with base variables\nprompt = ps.register_prompt(\n    prompt_id=\"greeting\",\n    initial_content=\"Hello {{ name }} !\",\n    variables={\n        \"name\": StringVariable()\n    }\n)\n\n# Add version with additional variable\nversion = ps.add_prompt_version(\n    prompt_id=\"greeting\",\n    content=\"Hello {{ name }}  from {{ location }} !\",\n    variables={\n        \"name\": StringVariable(),\n        \"location\": StringVariable()\n    }\n)\n</code></pre>"},{"location":"user-guide/variable-definitions/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Python API usage</li> <li>Explore Decorator Usage for tracking</li> <li>Check out Configuration options ```</li> </ul>"}]}